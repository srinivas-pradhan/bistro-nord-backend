{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "BookATableLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/bistro-nord-backend-dev-bookATable"
      }
    },
    "UpdateReservationLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/bistro-nord-backend-dev-UpdateReservation"
      }
    },
    "GetAReservationLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/bistro-nord-backend-dev-GetAReservation"
      }
    },
    "GetUsersReservationsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/bistro-nord-backend-dev-GetUsersReservations"
      }
    },
    "DoneWithAReservationLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/bistro-nord-backend-dev-DoneWithAReservation"
      }
    },
    "AddMenuItemLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/bistro-nord-backend-dev-addMenuItem"
      }
    },
    "AddMenuImageLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/bistro-nord-backend-dev-addMenuImage"
      }
    },
    "GetMenuItemsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/bistro-nord-backend-dev-getMenuItems"
      }
    },
    "MiddysdkLambdaLayer": {
      "Type": "AWS::Lambda::LayerVersion",
      "Properties": {
        "Content": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-5da0ce13-3bc7",
          "S3Key": "serverless/bistro-nord-backend/dev/1752412199508-2025-07-13T13:09:59.508Z/middysdk.zip"
        },
        "LayerName": "middysdk",
        "Description": "Middy Layer for JS Middleware Setup."
      }
    },
    "AwssdkLambdaLayer": {
      "Type": "AWS::Lambda::LayerVersion",
      "Properties": {
        "Content": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-5da0ce13-3bc7",
          "S3Key": "serverless/bistro-nord-backend/dev/1752412199508-2025-07-13T13:09:59.508Z/awssdk.zip"
        },
        "LayerName": "awssdk",
        "Description": "SDK Layer for AWS Node Package."
      }
    },
    "BookATableLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-5da0ce13-3bc7",
          "S3Key": "serverless/bistro-nord-backend/dev/1752412663176-2025-07-13T13:17:43.176Z/bistro-nord-backend.zip"
        },
        "Handler": "src/bookATable/handler.TableBookHandler",
        "Runtime": "nodejs20.x",
        "FunctionName": "bistro-nord-backend-dev-bookATable",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "TABLE_NAME": "BookATable"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "WriteDynamoDBRole",
            "Arn"
          ]
        },
        "Layers": [
          {
            "Ref": "AwssdkLambdaLayer"
          },
          {
            "Ref": "MiddysdkLambdaLayer"
          }
        ]
      },
      "DependsOn": [
        "BookATableLogGroup",
        "WriteDynamoDBRole"
      ]
    },
    "UpdateReservationLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-5da0ce13-3bc7",
          "S3Key": "serverless/bistro-nord-backend/dev/1752412663176-2025-07-13T13:17:43.176Z/bistro-nord-backend.zip"
        },
        "Handler": "src/UpdateReservation/handler.UpdateReservationHandler",
        "Runtime": "nodejs20.x",
        "FunctionName": "bistro-nord-backend-dev-UpdateReservation",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "TABLE_NAME": "BookATable",
            "BOOKING_NUMBER": "BookingNumber",
            "BOOKING_REF": "BookingRef"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "WriteDynamoDBRole",
            "Arn"
          ]
        },
        "Layers": [
          {
            "Ref": "AwssdkLambdaLayer"
          },
          {
            "Ref": "MiddysdkLambdaLayer"
          }
        ]
      },
      "DependsOn": [
        "UpdateReservationLogGroup",
        "WriteDynamoDBRole"
      ]
    },
    "GetAReservationLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-5da0ce13-3bc7",
          "S3Key": "serverless/bistro-nord-backend/dev/1752412663176-2025-07-13T13:17:43.176Z/bistro-nord-backend.zip"
        },
        "Handler": "src/GetAReservation/handler.GetAReservationHandler",
        "Runtime": "nodejs20.x",
        "FunctionName": "bistro-nord-backend-dev-GetAReservation",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "TABLE_NAME": "BookATable",
            "BOOKING_NUMBER": "BookingNumber"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "ReadDynamoDBRole",
            "Arn"
          ]
        },
        "Layers": [
          {
            "Ref": "AwssdkLambdaLayer"
          },
          {
            "Ref": "MiddysdkLambdaLayer"
          }
        ]
      },
      "DependsOn": [
        "GetAReservationLogGroup",
        "ReadDynamoDBRole"
      ]
    },
    "GetUsersReservationsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-5da0ce13-3bc7",
          "S3Key": "serverless/bistro-nord-backend/dev/1752412663176-2025-07-13T13:17:43.176Z/bistro-nord-backend.zip"
        },
        "Handler": "src/GetUsersReservations/handler.GetUsersReservationsHandler",
        "Runtime": "nodejs20.x",
        "FunctionName": "bistro-nord-backend-dev-GetUsersReservations",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "TABLE_NAME": "BookATable"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "ReadDynamoDBRole",
            "Arn"
          ]
        },
        "Layers": [
          {
            "Ref": "AwssdkLambdaLayer"
          },
          {
            "Ref": "MiddysdkLambdaLayer"
          }
        ]
      },
      "DependsOn": [
        "GetUsersReservationsLogGroup",
        "ReadDynamoDBRole"
      ]
    },
    "DoneWithAReservationLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-5da0ce13-3bc7",
          "S3Key": "serverless/bistro-nord-backend/dev/1752412663176-2025-07-13T13:17:43.176Z/bistro-nord-backend.zip"
        },
        "Handler": "src/DoneWithAReservation/handler.DoneWithAReservationHandler",
        "Runtime": "nodejs20.x",
        "FunctionName": "bistro-nord-backend-dev-DoneWithAReservation",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "TABLE_NAME": "BookATable",
            "DONE_TABLE_NAME": "DoneWithATable",
            "BOOKING_NUMBER": "BookingNumber"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "DoneWithATableRole",
            "Arn"
          ]
        },
        "Layers": [
          {
            "Ref": "AwssdkLambdaLayer"
          },
          {
            "Ref": "MiddysdkLambdaLayer"
          }
        ]
      },
      "DependsOn": [
        "DoneWithAReservationLogGroup",
        "DoneWithATableRole"
      ]
    },
    "AddMenuItemLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-5da0ce13-3bc7",
          "S3Key": "serverless/bistro-nord-backend/dev/1752412663176-2025-07-13T13:17:43.176Z/bistro-nord-backend.zip"
        },
        "Handler": "src/addMenuItem/handler.addMenuItemHandler",
        "Runtime": "nodejs20.x",
        "FunctionName": "bistro-nord-backend-dev-addMenuItem",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "TABLE_NAME": "MenuTable"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "MenuTableWriteDynamoDBRole",
            "Arn"
          ]
        },
        "Layers": [
          {
            "Ref": "AwssdkLambdaLayer"
          },
          {
            "Ref": "MiddysdkLambdaLayer"
          }
        ]
      },
      "DependsOn": [
        "AddMenuItemLogGroup",
        "MenuTableWriteDynamoDBRole"
      ]
    },
    "AddMenuImageLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-5da0ce13-3bc7",
          "S3Key": "serverless/bistro-nord-backend/dev/1752412663176-2025-07-13T13:17:43.176Z/bistro-nord-backend.zip"
        },
        "Handler": "src/addMenuItem/handler.addMenuImageHandler",
        "Runtime": "nodejs20.x",
        "FunctionName": "bistro-nord-backend-dev-addMenuImage",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "S3_BUCKET": "bistronord-backend-menuimages-bucket"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "MenuTableWriteDynamoDBRole",
            "Arn"
          ]
        },
        "Layers": [
          {
            "Ref": "AwssdkLambdaLayer"
          },
          {
            "Ref": "MiddysdkLambdaLayer"
          }
        ]
      },
      "DependsOn": [
        "AddMenuImageLogGroup",
        "MenuTableWriteDynamoDBRole"
      ]
    },
    "GetMenuItemsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-5da0ce13-3bc7",
          "S3Key": "serverless/bistro-nord-backend/dev/1752412663176-2025-07-13T13:17:43.176Z/bistro-nord-backend.zip"
        },
        "Handler": "src/getMenuItems/handler.getMenuItemsHandler",
        "Runtime": "nodejs20.x",
        "FunctionName": "bistro-nord-backend-dev-getMenuItems",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "TABLE_NAME": "MenuTable"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "MenuTableWriteDynamoDBRole",
            "Arn"
          ]
        },
        "Layers": [
          {
            "Ref": "AwssdkLambdaLayer"
          },
          {
            "Ref": "MiddysdkLambdaLayer"
          }
        ]
      },
      "DependsOn": [
        "GetMenuItemsLogGroup",
        "MenuTableWriteDynamoDBRole"
      ]
    },
    "BookATableLambdaVersiontbhPlUXPTwHHxJ9vqaD4LlVyrxunUqZtYbIn0CE8QU": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "BookATableLambdaFunction"
        },
        "CodeSha256": "n7b6Z00R9cxAR93ssT1ACTpRW+UTMZcrC7vs88c0v/E="
      }
    },
    "UpdateReservationLambdaVersionHikhlMieOZK54WZWH75s3X2RZBavCzD74TO8WoSkn8": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateReservationLambdaFunction"
        },
        "CodeSha256": "n7b6Z00R9cxAR93ssT1ACTpRW+UTMZcrC7vs88c0v/E="
      }
    },
    "GetAReservationLambdaVersionAezAMzEI0DRqKwLDu8VNwiDnL4T5geC3yLArkXACIA": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetAReservationLambdaFunction"
        },
        "CodeSha256": "n7b6Z00R9cxAR93ssT1ACTpRW+UTMZcrC7vs88c0v/E="
      }
    },
    "GetUsersReservationsLambdaVersion57TetCdGW0vdW4ACfSCZBRIGZZCisB2nFEZPB0OXksY": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetUsersReservationsLambdaFunction"
        },
        "CodeSha256": "n7b6Z00R9cxAR93ssT1ACTpRW+UTMZcrC7vs88c0v/E="
      }
    },
    "DoneWithAReservationLambdaVersionaBWUMSbnXnnp0ZxHbB0X2acA3XRmIdupttog7Q1X1E": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "DoneWithAReservationLambdaFunction"
        },
        "CodeSha256": "n7b6Z00R9cxAR93ssT1ACTpRW+UTMZcrC7vs88c0v/E="
      }
    },
    "AddMenuItemLambdaVersionrXsFyybyroNWnffPk9Mnp4XnmlBcHmEgBIywjdZo": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AddMenuItemLambdaFunction"
        },
        "CodeSha256": "n7b6Z00R9cxAR93ssT1ACTpRW+UTMZcrC7vs88c0v/E="
      }
    },
    "AddMenuImageLambdaVersionZHufO0mFbtVTIHIOViqv2bhu8x8Sdshg3OCTbIhlE": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AddMenuImageLambdaFunction"
        },
        "CodeSha256": "n7b6Z00R9cxAR93ssT1ACTpRW+UTMZcrC7vs88c0v/E="
      }
    },
    "GetMenuItemsLambdaVersion4eaPxe2XGaf1mnubuZdIcltxQjhlGlz0Iqt66HP3dWU": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetMenuItemsLambdaFunction"
        },
        "CodeSha256": "n7b6Z00R9cxAR93ssT1ACTpRW+UTMZcrC7vs88c0v/E="
      }
    },
    "HttpApi": {
      "Type": "AWS::ApiGatewayV2::Api",
      "Properties": {
        "Name": "dev-bistro-nord-backend",
        "ProtocolType": "HTTP"
      }
    },
    "HttpApiStage": {
      "Type": "AWS::ApiGatewayV2::Stage",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "StageName": "$default",
        "AutoDeploy": true,
        "DefaultRouteSettings": {
          "DetailedMetricsEnabled": false
        }
      }
    },
    "HttpApiAuthorizerJwtAuthorizer": {
      "Type": "AWS::ApiGatewayV2::Authorizer",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "Name": "JwtAuthorizer",
        "IdentitySource": [
          "$request.header.Authorization"
        ],
        "AuthorizerType": "JWT",
        "JwtConfiguration": {
          "Audience": [
            {
              "Ref": "CognitoUserPoolClient"
            }
          ],
          "Issuer": {
            "Fn::GetAtt": [
              "CognitoUserPool",
              "ProviderURL"
            ]
          }
        }
      }
    },
    "BookATableLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "BookATableLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationBookATable": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "BookATableLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostBookatable": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /bookATable",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationBookATable"
              }
            ]
          ]
        },
        "AuthorizationType": "JWT",
        "AuthorizerId": {
          "Ref": "HttpApiAuthorizerJwtAuthorizer"
        },
        "AuthorizationScopes": [
          "ServerAccessScope/write"
        ]
      },
      "DependsOn": "HttpApiIntegrationBookATable"
    },
    "UpdateReservationLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateReservationLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationUpdateReservation": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "UpdateReservationLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePutUpdatereservationOrderidVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "PUT /UpdateReservation/{OrderId}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationUpdateReservation"
              }
            ]
          ]
        },
        "AuthorizationType": "JWT",
        "AuthorizerId": {
          "Ref": "HttpApiAuthorizerJwtAuthorizer"
        },
        "AuthorizationScopes": [
          "ServerAccessScope/write"
        ]
      },
      "DependsOn": "HttpApiIntegrationUpdateReservation"
    },
    "GetAReservationLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetAReservationLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetAReservation": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetAReservationLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetGetareservationOrderidVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /GetAReservation/{OrderId}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetAReservation"
              }
            ]
          ]
        },
        "AuthorizationType": "JWT",
        "AuthorizerId": {
          "Ref": "HttpApiAuthorizerJwtAuthorizer"
        },
        "AuthorizationScopes": [
          "ServerAccessScope/read"
        ]
      },
      "DependsOn": "HttpApiIntegrationGetAReservation"
    },
    "GetUsersReservationsLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetUsersReservationsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetUsersReservations": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetUsersReservationsLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetGetusersreservationsUseridVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /GetUsersReservations/{UserId}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetUsersReservations"
              }
            ]
          ]
        },
        "AuthorizationType": "JWT",
        "AuthorizerId": {
          "Ref": "HttpApiAuthorizerJwtAuthorizer"
        },
        "AuthorizationScopes": [
          "ServerAccessScope/read"
        ]
      },
      "DependsOn": "HttpApiIntegrationGetUsersReservations"
    },
    "DoneWithAReservationLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "DoneWithAReservationLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationDoneWithAReservation": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "DoneWithAReservationLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostDonewithareservationOrderidVarStatusVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /DoneWithAReservation/{OrderId}/{Status}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationDoneWithAReservation"
              }
            ]
          ]
        },
        "AuthorizationType": "JWT",
        "AuthorizerId": {
          "Ref": "HttpApiAuthorizerJwtAuthorizer"
        },
        "AuthorizationScopes": [
          "ServerAccessScope/write"
        ]
      },
      "DependsOn": "HttpApiIntegrationDoneWithAReservation"
    },
    "AddMenuItemLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AddMenuItemLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationAddMenuItem": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "AddMenuItemLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostAddmenuitem": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /addMenuItem",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationAddMenuItem"
              }
            ]
          ]
        },
        "AuthorizationType": "JWT",
        "AuthorizerId": {
          "Ref": "HttpApiAuthorizerJwtAuthorizer"
        },
        "AuthorizationScopes": [
          "ServerAccessScope/write"
        ]
      },
      "DependsOn": "HttpApiIntegrationAddMenuItem"
    },
    "AddMenuImageLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AddMenuImageLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationAddMenuImage": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "AddMenuImageLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostAddmenuimage": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /addMenuImage",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationAddMenuImage"
              }
            ]
          ]
        },
        "AuthorizationType": "JWT",
        "AuthorizerId": {
          "Ref": "HttpApiAuthorizerJwtAuthorizer"
        },
        "AuthorizationScopes": [
          "ServerAccessScope/write"
        ]
      },
      "DependsOn": "HttpApiIntegrationAddMenuImage"
    },
    "GetMenuItemsLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetMenuItemsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetMenuItems": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetMenuItemsLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetGetmenuitems": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /getMenuItems",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetMenuItems"
              }
            ]
          ]
        },
        "AuthorizationType": "JWT",
        "AuthorizerId": {
          "Ref": "HttpApiAuthorizerJwtAuthorizer"
        },
        "AuthorizationScopes": [
          "ServerAccessScope/read"
        ]
      },
      "DependsOn": "HttpApiIntegrationGetMenuItems"
    },
    "CognitoUserPool": {
      "Type": "AWS::Cognito::UserPool",
      "Properties": {
        "UserPoolName": "Bistro-Nord-UserPool",
        "UsernameAttributes": [
          "email"
        ],
        "AutoVerifiedAttributes": [
          "email"
        ],
        "UserPoolTags": {
          "git": "https://github.com/srinivas-pradhan/bistro-nord-backend",
          "app": "Bistro-Nord"
        }
      }
    },
    "CognitoUserPoolClient": {
      "Type": "AWS::Cognito::UserPoolClient",
      "Properties": {
        "ClientName": "Bistro-Nord-UserPool-client",
        "AccessTokenValidity": 24,
        "TokenValidityUnits": {
          "AccessToken": "hours"
        },
        "UserPoolId": {
          "Ref": "CognitoUserPool"
        },
        "GenerateSecret": true,
        "ExplicitAuthFlows": [
          "ADMIN_NO_SRP_AUTH"
        ],
        "AllowedOAuthFlows": [
          "client_credentials"
        ],
        "AllowedOAuthFlowsUserPoolClient": true,
        "AllowedOAuthScopes": [
          "ServerAccessScope/read",
          "ServerAccessScope/write"
        ],
        "SupportedIdentityProviders": [
          "COGNITO"
        ],
        "CallbackURLs": [
          "https://example.com/signout"
        ]
      }
    },
    "UserPoolDomain": {
      "Type": "AWS::Cognito::UserPoolDomain",
      "Properties": {
        "UserPoolId": {
          "Ref": "CognitoUserPool"
        },
        "Domain": "bistro-nord-backend"
      }
    },
    "UserPoolResourceServer": {
      "Type": "AWS::Cognito::UserPoolResourceServer",
      "Properties": {
        "UserPoolId": {
          "Ref": "CognitoUserPool"
        },
        "Identifier": "ServerAccessScope",
        "Name": "ServerAccessScope",
        "Scopes": [
          {
            "ScopeName": "read",
            "ScopeDescription": "GET Calls SCOPE"
          },
          {
            "ScopeName": "write",
            "ScopeDescription": "POST PUT DELETE Calls SCOPE"
          }
        ]
      }
    },
    "BookATableDynamoDBTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "BookATable",
        "AttributeDefinitions": [
          {
            "AttributeName": "BookingRef",
            "AttributeType": "S"
          },
          {
            "AttributeName": "BookingNumber",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "BookingRef",
            "KeyType": "HASH"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": 1,
          "WriteCapacityUnits": 1
        },
        "GlobalSecondaryIndexes": [
          {
            "IndexName": "BookingNumber",
            "KeySchema": [
              {
                "AttributeName": "BookingNumber",
                "KeyType": "HASH"
              }
            ],
            "Projection": {
              "ProjectionType": "ALL"
            },
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 1,
              "WriteCapacityUnits": 1
            }
          }
        ],
        "Tags": [
          {
            "Key": "git",
            "Value": "https://github.com/srinivas-pradhan/bistro-nord-backend"
          },
          {
            "Key": "app",
            "Value": "Bistro-Nord"
          }
        ]
      }
    },
    "DoneWithATableDynamoDBTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "DoneWithATable",
        "AttributeDefinitions": [
          {
            "AttributeName": "BookingRef",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "BookingRef",
            "KeyType": "HASH"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": 1,
          "WriteCapacityUnits": 1
        },
        "Tags": [
          {
            "Key": "git",
            "Value": "https://github.com/srinivas-pradhan/bistro-nord-backend"
          },
          {
            "Key": "app",
            "Value": "Bistro-Nord"
          }
        ]
      }
    },
    "MenuTableDynamoDBTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "MenuTable",
        "AttributeDefinitions": [
          {
            "AttributeName": "MenuItem",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "MenuItem",
            "KeyType": "HASH"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": 1,
          "WriteCapacityUnits": 1
        },
        "Tags": [
          {
            "Key": "git",
            "Value": "https://github.com/srinivas-pradhan/bistro-nord-backend"
          },
          {
            "Key": "app",
            "Value": "Bistro-Nord"
          }
        ]
      }
    },
    "WriteDynamoDBRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "Path": "/bistro-nord/bistro-nord-backend/lambda-role/",
        "RoleName": "WriteDynamoDBRole",
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "CloudWatchLogPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                    "logs:TagResource"
                  ],
                  "Resource": [
                    {
                      "Fn::Join": [
                        ":",
                        [
                          "arn:aws:logs",
                          {
                            "Ref": "AWS::Region"
                          },
                          {
                            "Ref": "AWS::AccountId"
                          },
                          "log-group:/aws/lambda/*:*:*"
                        ]
                      ]
                    }
                  ]
                }
              ]
            }
          },
          {
            "PolicyName": "WriteDynamoDBPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:BatchGetItem",
                    "dynamodb:BatchWriteItem",
                    "dynamodb:ConditionCheckItem",
                    "dynamodb:PutItem",
                    "dynamodb:DescribeTable",
                    "dynamodb:DeleteItem",
                    "dynamodb:GetItem",
                    "dynamodb:Scan",
                    "dynamodb:Query",
                    "dynamodb:UpdateItem"
                  ],
                  "Resource": [
                    {
                      "Fn::Join": [
                        ":",
                        [
                          "arn:aws:dynamodb",
                          {
                            "Ref": "AWS::Region"
                          },
                          {
                            "Ref": "AWS::AccountId"
                          },
                          {
                            "Fn::Join": [
                              "/",
                              [
                                "table",
                                {
                                  "Ref": "BookATableDynamoDBTable"
                                }
                              ]
                            ]
                          }
                        ]
                      ]
                    },
                    {
                      "Fn::Join": [
                        ":",
                        [
                          "arn:aws:dynamodb",
                          {
                            "Ref": "AWS::Region"
                          },
                          {
                            "Ref": "AWS::AccountId"
                          },
                          {
                            "Fn::Join": [
                              "/",
                              [
                                "table",
                                {
                                  "Ref": "BookATableDynamoDBTable"
                                },
                                "index",
                                "*"
                              ]
                            ]
                          }
                        ]
                      ]
                    }
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "ReadDynamoDBRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "Path": "/bistro-nord/bistro-nord-backend/lambda-role/",
        "RoleName": "ReadDynamoDBRole",
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "CloudWatchLogPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                    "logs:TagResource"
                  ],
                  "Resource": [
                    {
                      "Fn::Join": [
                        ":",
                        [
                          "arn:aws:logs",
                          {
                            "Ref": "AWS::Region"
                          },
                          {
                            "Ref": "AWS::AccountId"
                          },
                          "log-group:/aws/lambda/*:*:*"
                        ]
                      ]
                    }
                  ]
                }
              ]
            }
          },
          {
            "PolicyName": "ReadDynamoDBPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:BatchGetItem",
                    "dynamodb:ConditionCheckItem",
                    "dynamodb:DescribeTable",
                    "dynamodb:GetItem",
                    "dynamodb:Scan",
                    "dynamodb:Query"
                  ],
                  "Resource": [
                    {
                      "Fn::Join": [
                        ":",
                        [
                          "arn:aws:dynamodb",
                          {
                            "Ref": "AWS::Region"
                          },
                          {
                            "Ref": "AWS::AccountId"
                          },
                          {
                            "Fn::Join": [
                              "/",
                              [
                                "table",
                                {
                                  "Ref": "BookATableDynamoDBTable"
                                }
                              ]
                            ]
                          }
                        ]
                      ]
                    },
                    {
                      "Fn::Join": [
                        ":",
                        [
                          "arn:aws:dynamodb",
                          {
                            "Ref": "AWS::Region"
                          },
                          {
                            "Ref": "AWS::AccountId"
                          },
                          {
                            "Fn::Join": [
                              "/",
                              [
                                "table",
                                {
                                  "Ref": "BookATableDynamoDBTable"
                                },
                                "index",
                                "*"
                              ]
                            ]
                          }
                        ]
                      ]
                    }
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "DoneWithATableRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "Path": "/bistro-nord/bistro-nord-backend/lambda-role/",
        "RoleName": "DoneWithATableRole",
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "CloudWatchLogPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                    "logs:TagResource"
                  ],
                  "Resource": [
                    {
                      "Fn::Join": [
                        ":",
                        [
                          "arn:aws:logs",
                          {
                            "Ref": "AWS::Region"
                          },
                          {
                            "Ref": "AWS::AccountId"
                          },
                          "log-group:/aws/lambda/*:*:*"
                        ]
                      ]
                    }
                  ]
                }
              ]
            }
          },
          {
            "PolicyName": "DoneWithATableReadPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:BatchGetItem",
                    "dynamodb:ConditionCheckItem",
                    "dynamodb:DescribeTable",
                    "dynamodb:GetItem",
                    "dynamodb:Scan",
                    "dynamodb:Query",
                    "dynamodb:DeleteItem"
                  ],
                  "Resource": [
                    {
                      "Fn::Join": [
                        ":",
                        [
                          "arn:aws:dynamodb",
                          {
                            "Ref": "AWS::Region"
                          },
                          {
                            "Ref": "AWS::AccountId"
                          },
                          {
                            "Fn::Join": [
                              "/",
                              [
                                "table",
                                {
                                  "Ref": "BookATableDynamoDBTable"
                                }
                              ]
                            ]
                          }
                        ]
                      ]
                    },
                    {
                      "Fn::Join": [
                        ":",
                        [
                          "arn:aws:dynamodb",
                          {
                            "Ref": "AWS::Region"
                          },
                          {
                            "Ref": "AWS::AccountId"
                          },
                          {
                            "Fn::Join": [
                              "/",
                              [
                                "table",
                                {
                                  "Ref": "BookATableDynamoDBTable"
                                },
                                "index",
                                "*"
                              ]
                            ]
                          }
                        ]
                      ]
                    }
                  ]
                }
              ]
            }
          },
          {
            "PolicyName": "DoneWithATableWritePolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:BatchGetItem",
                    "dynamodb:BatchWriteItem",
                    "dynamodb:ConditionCheckItem",
                    "dynamodb:PutItem",
                    "dynamodb:DescribeTable",
                    "dynamodb:DeleteItem",
                    "dynamodb:GetItem",
                    "dynamodb:Scan",
                    "dynamodb:Query",
                    "dynamodb:UpdateItem"
                  ],
                  "Resource": [
                    {
                      "Fn::Join": [
                        ":",
                        [
                          "arn:aws:dynamodb",
                          {
                            "Ref": "AWS::Region"
                          },
                          {
                            "Ref": "AWS::AccountId"
                          },
                          {
                            "Fn::Join": [
                              "/",
                              [
                                "table",
                                {
                                  "Ref": "DoneWithATableDynamoDBTable"
                                }
                              ]
                            ]
                          }
                        ]
                      ]
                    }
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "MenuTableWriteDynamoDBRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "Path": "/bistro-nord/bistro-nord-backend/lambda-role/",
        "RoleName": "MenuTableWriteRole",
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "CloudWatchLogPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                    "logs:TagResource"
                  ],
                  "Resource": [
                    {
                      "Fn::Join": [
                        ":",
                        [
                          "arn:aws:logs",
                          {
                            "Ref": "AWS::Region"
                          },
                          {
                            "Ref": "AWS::AccountId"
                          },
                          "log-group:/aws/lambda/*:*:*"
                        ]
                      ]
                    }
                  ]
                }
              ]
            }
          },
          {
            "PolicyName": "MenuTableWritePolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:BatchGetItem",
                    "dynamodb:BatchWriteItem",
                    "dynamodb:ConditionCheckItem",
                    "dynamodb:PutItem",
                    "dynamodb:DescribeTable",
                    "dynamodb:DeleteItem",
                    "dynamodb:GetItem",
                    "dynamodb:Scan",
                    "dynamodb:Query",
                    "dynamodb:UpdateItem"
                  ],
                  "Resource": [
                    {
                      "Fn::Join": [
                        ":",
                        [
                          "arn:aws:dynamodb",
                          {
                            "Ref": "AWS::Region"
                          },
                          {
                            "Ref": "AWS::AccountId"
                          },
                          {
                            "Fn::Join": [
                              "/",
                              [
                                "table",
                                {
                                  "Ref": "MenuTableDynamoDBTable"
                                }
                              ]
                            ]
                          }
                        ]
                      ]
                    }
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "ReadMenuDynamoDBRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "Path": "/bistro-nord/bistro-nord-backend/lambda-role/",
        "RoleName": "MenuTableReadRole",
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "CloudWatchLogPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                    "logs:TagResource"
                  ],
                  "Resource": [
                    {
                      "Fn::Join": [
                        ":",
                        [
                          "arn:aws:logs",
                          {
                            "Ref": "AWS::Region"
                          },
                          {
                            "Ref": "AWS::AccountId"
                          },
                          "log-group:/aws/lambda/*:*:*"
                        ]
                      ]
                    }
                  ]
                }
              ]
            }
          },
          {
            "PolicyName": "MenuTableReadPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:BatchGetItem",
                    "dynamodb:ConditionCheckItem",
                    "dynamodb:DescribeTable",
                    "dynamodb:GetItem",
                    "dynamodb:Scan",
                    "dynamodb:Query"
                  ],
                  "Resource": [
                    {
                      "Fn::Join": [
                        ":",
                        [
                          "arn:aws:dynamodb",
                          {
                            "Ref": "AWS::Region"
                          },
                          {
                            "Ref": "AWS::AccountId"
                          },
                          {
                            "Fn::Join": [
                              "/",
                              [
                                "table",
                                {
                                  "Ref": "MenuTableDynamoDBTable"
                                }
                              ]
                            ]
                          }
                        ]
                      ]
                    }
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "MenuS3Bucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketName": "bistronord-backend-menuimages-bucket",
        "PublicAccessBlockConfiguration": {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true
        }
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": "serverless-framework-deployments-us-east-1-5da0ce13-3bc7",
      "Export": {
        "Name": "sls-bistro-nord-backend-dev-ServerlessDeploymentBucketName"
      }
    },
    "MiddysdkLambdaLayerQualifiedArn": {
      "Description": "Current Lambda layer version",
      "Value": {
        "Ref": "MiddysdkLambdaLayer"
      },
      "Export": {
        "Name": "sls-bistro-nord-backend-dev-MiddysdkLambdaLayerQualifiedArn"
      }
    },
    "MiddysdkLambdaLayerHash": {
      "Description": "Current Lambda layer hash",
      "Value": "47a58f60af51ebd07de6d08c06b60d5e3f4840ae",
      "Export": {
        "Name": "sls-bistro-nord-backend-dev-MiddysdkLambdaLayerHash"
      }
    },
    "MiddysdkLambdaLayerS3Key": {
      "Description": "Current Lambda layer S3Key",
      "Value": "serverless/bistro-nord-backend/dev/1752412199508-2025-07-13T13:09:59.508Z/middysdk.zip",
      "Export": {
        "Name": "sls-bistro-nord-backend-dev-MiddysdkLambdaLayerS3Key"
      }
    },
    "AwssdkLambdaLayerQualifiedArn": {
      "Description": "Current Lambda layer version",
      "Value": {
        "Ref": "AwssdkLambdaLayer"
      },
      "Export": {
        "Name": "sls-bistro-nord-backend-dev-AwssdkLambdaLayerQualifiedArn"
      }
    },
    "AwssdkLambdaLayerHash": {
      "Description": "Current Lambda layer hash",
      "Value": "deaafabea3348c988e7e4ec6024f1e1c3c67dbb8",
      "Export": {
        "Name": "sls-bistro-nord-backend-dev-AwssdkLambdaLayerHash"
      }
    },
    "AwssdkLambdaLayerS3Key": {
      "Description": "Current Lambda layer S3Key",
      "Value": "serverless/bistro-nord-backend/dev/1752412199508-2025-07-13T13:09:59.508Z/awssdk.zip",
      "Export": {
        "Name": "sls-bistro-nord-backend-dev-AwssdkLambdaLayerS3Key"
      }
    },
    "BookATableLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "BookATableLambdaVersiontbhPlUXPTwHHxJ9vqaD4LlVyrxunUqZtYbIn0CE8QU"
      },
      "Export": {
        "Name": "sls-bistro-nord-backend-dev-BookATableLambdaFunctionQualifiedArn"
      }
    },
    "UpdateReservationLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdateReservationLambdaVersionHikhlMieOZK54WZWH75s3X2RZBavCzD74TO8WoSkn8"
      },
      "Export": {
        "Name": "sls-bistro-nord-backend-dev-UpdateReservationLambdaFunctionQualifiedArn"
      }
    },
    "GetAReservationLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetAReservationLambdaVersionAezAMzEI0DRqKwLDu8VNwiDnL4T5geC3yLArkXACIA"
      },
      "Export": {
        "Name": "sls-bistro-nord-backend-dev-GetAReservationLambdaFunctionQualifiedArn"
      }
    },
    "GetUsersReservationsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetUsersReservationsLambdaVersion57TetCdGW0vdW4ACfSCZBRIGZZCisB2nFEZPB0OXksY"
      },
      "Export": {
        "Name": "sls-bistro-nord-backend-dev-GetUsersReservationsLambdaFunctionQualifiedArn"
      }
    },
    "DoneWithAReservationLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "DoneWithAReservationLambdaVersionaBWUMSbnXnnp0ZxHbB0X2acA3XRmIdupttog7Q1X1E"
      },
      "Export": {
        "Name": "sls-bistro-nord-backend-dev-DoneWithAReservationLambdaFunctionQualifiedArn"
      }
    },
    "AddMenuItemLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "AddMenuItemLambdaVersionrXsFyybyroNWnffPk9Mnp4XnmlBcHmEgBIywjdZo"
      },
      "Export": {
        "Name": "sls-bistro-nord-backend-dev-AddMenuItemLambdaFunctionQualifiedArn"
      }
    },
    "AddMenuImageLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "AddMenuImageLambdaVersionZHufO0mFbtVTIHIOViqv2bhu8x8Sdshg3OCTbIhlE"
      },
      "Export": {
        "Name": "sls-bistro-nord-backend-dev-AddMenuImageLambdaFunctionQualifiedArn"
      }
    },
    "GetMenuItemsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetMenuItemsLambdaVersion4eaPxe2XGaf1mnubuZdIcltxQjhlGlz0Iqt66HP3dWU"
      },
      "Export": {
        "Name": "sls-bistro-nord-backend-dev-GetMenuItemsLambdaFunctionQualifiedArn"
      }
    },
    "HttpApiId": {
      "Description": "Id of the HTTP API",
      "Value": {
        "Ref": "HttpApi"
      },
      "Export": {
        "Name": "sls-bistro-nord-backend-dev-HttpApiId"
      }
    },
    "HttpApiUrl": {
      "Description": "URL of the HTTP API",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "HttpApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            }
          ]
        ]
      },
      "Export": {
        "Name": "sls-bistro-nord-backend-dev-HttpApiUrl"
      }
    }
  }
}