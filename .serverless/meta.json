{
  "/Users/srinivas/Documents/repos/bistro-nord-backend/serverless.yml": {
    "versionFramework": "4.6.1",
    "servicePath": "/Users/srinivas/Documents/repos/bistro-nord-backend/serverless.yml",
    "serviceConfigFileName": "serverless.yml",
    "service": {
      "org": "srinivaspradhan",
      "service": "bistro-nord-backend",
      "provider": {
        "name": "aws",
        "runtime": "nodejs20.x",
        "httpApi": {
          "authorizers": {
            "JwtAuthorizer": {
              "type": "jwt",
              "identitySource": "$request.header.Authorization",
              "issuerUrl": {
                "Fn::GetAtt": [
                  "CognitoUserPool",
                  "ProviderURL"
                ]
              },
              "audience": [
                {
                  "Ref": "CognitoUserPoolClient"
                }
              ]
            }
          }
        },
        "stage": "dev",
        "region": "us-east-1",
        "versionFunctions": true,
        "compiledCloudFormationTemplate": {
          "AWSTemplateFormatVersion": "2010-09-09",
          "Description": "The AWS CloudFormation template for this Serverless application",
          "Resources": {
            "ServerlessDeploymentBucket": {
              "Type": "AWS::S3::Bucket",
              "Properties": {
                "BucketEncryption": {
                  "ServerSideEncryptionConfiguration": [
                    {
                      "ServerSideEncryptionByDefault": {
                        "SSEAlgorithm": "AES256"
                      }
                    }
                  ]
                }
              }
            },
            "ServerlessDeploymentBucketPolicy": {
              "Type": "AWS::S3::BucketPolicy",
              "Properties": {
                "Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "PolicyDocument": {
                  "Statement": [
                    {
                      "Action": "s3:*",
                      "Effect": "Deny",
                      "Principal": "*",
                      "Resource": [
                        {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":s3:::",
                              {
                                "Ref": "ServerlessDeploymentBucket"
                              },
                              "/*"
                            ]
                          ]
                        },
                        {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":s3:::",
                              {
                                "Ref": "ServerlessDeploymentBucket"
                              }
                            ]
                          ]
                        }
                      ],
                      "Condition": {
                        "Bool": {
                          "aws:SecureTransport": false
                        }
                      }
                    }
                  ]
                }
              }
            },
            "BookATableLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/bistro-nord-backend-dev-bookATable"
              }
            },
            "UpdateReservationLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/bistro-nord-backend-dev-UpdateReservation"
              }
            },
            "GetAReservationLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/bistro-nord-backend-dev-GetAReservation"
              }
            },
            "GetUsersReservationsLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/bistro-nord-backend-dev-GetUsersReservations"
              }
            },
            "DoneWithAReservationLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/bistro-nord-backend-dev-DoneWithAReservation"
              }
            },
            "AddMenuItemLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/bistro-nord-backend-dev-addMenuItem"
              }
            },
            "MiddysdkLambdaLayer": {
              "Type": "AWS::Lambda::LayerVersion",
              "Properties": {
                "Content": {
                  "S3Bucket": {
                    "Ref": "ServerlessDeploymentBucket"
                  },
                  "S3Key": "serverless/bistro-nord-backend/dev/1738320153999-2025-01-31T10:42:33.999Z/middysdk.zip"
                },
                "LayerName": "middysdk",
                "Description": "Middy Layer for JS Middleware Setup."
              }
            },
            "AwssdkLambdaLayer": {
              "Type": "AWS::Lambda::LayerVersion",
              "Properties": {
                "Content": {
                  "S3Bucket": {
                    "Ref": "ServerlessDeploymentBucket"
                  },
                  "S3Key": "serverless/bistro-nord-backend/dev/1738324788715-2025-01-31T11:59:48.715Z/awssdk.zip"
                },
                "LayerName": "awssdk",
                "Description": "SDK Layer for AWS Node Package."
              }
            },
            "BookATableLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": {
                    "Ref": "ServerlessDeploymentBucket"
                  },
                  "S3Key": "serverless/bistro-nord-backend/dev/1738810062460-2025-02-06T02:47:42.460Z/bistro-nord-backend.zip"
                },
                "Handler": "src/bookATable/handler.TableBookHandler",
                "Runtime": "nodejs20.x",
                "FunctionName": "bistro-nord-backend-dev-bookATable",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "TABLE_NAME": "BookATable"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "WriteDynamoDBRole",
                    "Arn"
                  ]
                },
                "Layers": [
                  {
                    "Ref": "AwssdkLambdaLayer"
                  },
                  {
                    "Ref": "MiddysdkLambdaLayer"
                  }
                ]
              },
              "DependsOn": [
                "BookATableLogGroup",
                "WriteDynamoDBRole"
              ]
            },
            "UpdateReservationLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": {
                    "Ref": "ServerlessDeploymentBucket"
                  },
                  "S3Key": "serverless/bistro-nord-backend/dev/1738810062460-2025-02-06T02:47:42.460Z/bistro-nord-backend.zip"
                },
                "Handler": "src/UpdateReservation/handler.UpdateReservationHandler",
                "Runtime": "nodejs20.x",
                "FunctionName": "bistro-nord-backend-dev-UpdateReservation",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "TABLE_NAME": "BookATable",
                    "BOOKING_NUMBER": "BookingNumber",
                    "BOOKING_REF": "BookingRef"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "WriteDynamoDBRole",
                    "Arn"
                  ]
                },
                "Layers": [
                  {
                    "Ref": "AwssdkLambdaLayer"
                  },
                  {
                    "Ref": "MiddysdkLambdaLayer"
                  }
                ]
              },
              "DependsOn": [
                "UpdateReservationLogGroup",
                "WriteDynamoDBRole"
              ]
            },
            "GetAReservationLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": {
                    "Ref": "ServerlessDeploymentBucket"
                  },
                  "S3Key": "serverless/bistro-nord-backend/dev/1738810062460-2025-02-06T02:47:42.460Z/bistro-nord-backend.zip"
                },
                "Handler": "src/GetAReservation/handler.GetAReservationHandler",
                "Runtime": "nodejs20.x",
                "FunctionName": "bistro-nord-backend-dev-GetAReservation",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "TABLE_NAME": "BookATable",
                    "BOOKING_NUMBER": "BookingNumber"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "ReadDynamoDBRole",
                    "Arn"
                  ]
                },
                "Layers": [
                  {
                    "Ref": "AwssdkLambdaLayer"
                  },
                  {
                    "Ref": "MiddysdkLambdaLayer"
                  }
                ]
              },
              "DependsOn": [
                "GetAReservationLogGroup",
                "ReadDynamoDBRole"
              ]
            },
            "GetUsersReservationsLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": {
                    "Ref": "ServerlessDeploymentBucket"
                  },
                  "S3Key": "serverless/bistro-nord-backend/dev/1738810062460-2025-02-06T02:47:42.460Z/bistro-nord-backend.zip"
                },
                "Handler": "src/GetUsersReservations/handler.GetUsersReservationsHandler",
                "Runtime": "nodejs20.x",
                "FunctionName": "bistro-nord-backend-dev-GetUsersReservations",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "TABLE_NAME": "BookATable"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "ReadDynamoDBRole",
                    "Arn"
                  ]
                },
                "Layers": [
                  {
                    "Ref": "AwssdkLambdaLayer"
                  },
                  {
                    "Ref": "MiddysdkLambdaLayer"
                  }
                ]
              },
              "DependsOn": [
                "GetUsersReservationsLogGroup",
                "ReadDynamoDBRole"
              ]
            },
            "DoneWithAReservationLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": {
                    "Ref": "ServerlessDeploymentBucket"
                  },
                  "S3Key": "serverless/bistro-nord-backend/dev/1738810062460-2025-02-06T02:47:42.460Z/bistro-nord-backend.zip"
                },
                "Handler": "src/DoneWithAReservation/handler.DoneWithAReservationHandler",
                "Runtime": "nodejs20.x",
                "FunctionName": "bistro-nord-backend-dev-DoneWithAReservation",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "TABLE_NAME": "BookATable",
                    "DONE_TABLE_NAME": "DoneWithATable",
                    "BOOKING_NUMBER": "BookingNumber"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "DoneWithATableRole",
                    "Arn"
                  ]
                },
                "Layers": [
                  {
                    "Ref": "AwssdkLambdaLayer"
                  },
                  {
                    "Ref": "MiddysdkLambdaLayer"
                  }
                ]
              },
              "DependsOn": [
                "DoneWithAReservationLogGroup",
                "DoneWithATableRole"
              ]
            },
            "AddMenuItemLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": {
                    "Ref": "ServerlessDeploymentBucket"
                  },
                  "S3Key": "serverless/bistro-nord-backend/dev/1738810062460-2025-02-06T02:47:42.460Z/bistro-nord-backend.zip"
                },
                "Handler": "src/addMenuItem/handler.addMenuItemHandler",
                "Runtime": "nodejs20.x",
                "FunctionName": "bistro-nord-backend-dev-addMenuItem",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "TABLE_NAME": "MenuTable"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "MenuTableWriteDynamoDBRole",
                    "Arn"
                  ]
                },
                "Layers": [
                  {
                    "Ref": "AwssdkLambdaLayer"
                  },
                  {
                    "Ref": "MiddysdkLambdaLayer"
                  }
                ]
              },
              "DependsOn": [
                "AddMenuItemLogGroup",
                "MenuTableWriteDynamoDBRole"
              ]
            },
            "BookATableLambdaVersion9MyjqD7eqpAz5txAW66W8eZIOKsaSFm47FbkqXl0r2U": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "BookATableLambdaFunction"
                },
                "CodeSha256": "Nwkgi3gh2I+hcim6HAHJ48UnYsHMp0K3/eGxWnGqa+k="
              }
            },
            "UpdateReservationLambdaVersionsZImiSjY87jbFs3QTBdvIuNldWCzYZeljRanm4MRNU": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "UpdateReservationLambdaFunction"
                },
                "CodeSha256": "Nwkgi3gh2I+hcim6HAHJ48UnYsHMp0K3/eGxWnGqa+k="
              }
            },
            "GetAReservationLambdaVersionQHcyBveSomm3blpQG1AOindymJ0iNsyawgRLQVEtHs": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetAReservationLambdaFunction"
                },
                "CodeSha256": "Nwkgi3gh2I+hcim6HAHJ48UnYsHMp0K3/eGxWnGqa+k="
              }
            },
            "GetUsersReservationsLambdaVersionH7GFMwz5cpITNKKcZOfjmTt6SSr7bX4322dudx1vJY": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetUsersReservationsLambdaFunction"
                },
                "CodeSha256": "Nwkgi3gh2I+hcim6HAHJ48UnYsHMp0K3/eGxWnGqa+k="
              }
            },
            "DoneWithAReservationLambdaVersion8zuAiT4T0u9tYo5SyH3hudQpEwIK92MgzX2IMOvHQ": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "DoneWithAReservationLambdaFunction"
                },
                "CodeSha256": "Nwkgi3gh2I+hcim6HAHJ48UnYsHMp0K3/eGxWnGqa+k="
              }
            },
            "AddMenuItemLambdaVersionD4WVOWg0Ko5a9sJIpRFwXg9o8EaaI671Uw8RMc5ks": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "AddMenuItemLambdaFunction"
                },
                "CodeSha256": "Nwkgi3gh2I+hcim6HAHJ48UnYsHMp0K3/eGxWnGqa+k="
              }
            },
            "HttpApi": {
              "Type": "AWS::ApiGatewayV2::Api",
              "Properties": {
                "Name": "dev-bistro-nord-backend",
                "ProtocolType": "HTTP"
              }
            },
            "HttpApiStage": {
              "Type": "AWS::ApiGatewayV2::Stage",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "StageName": "$default",
                "AutoDeploy": true,
                "DefaultRouteSettings": {
                  "DetailedMetricsEnabled": false
                }
              }
            },
            "HttpApiAuthorizerJwtAuthorizer": {
              "Type": "AWS::ApiGatewayV2::Authorizer",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "Name": "JwtAuthorizer",
                "IdentitySource": [
                  "$request.header.Authorization"
                ],
                "AuthorizerType": "JWT",
                "JwtConfiguration": {
                  "Audience": [
                    {
                      "Ref": "CognitoUserPoolClient"
                    }
                  ],
                  "Issuer": {
                    "Fn::GetAtt": [
                      "CognitoUserPool",
                      "ProviderURL"
                    ]
                  }
                }
              }
            },
            "BookATableLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "BookATableLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationBookATable": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "BookATableLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRoutePostBookatable": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "POST /bookATable",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationBookATable"
                      }
                    ]
                  ]
                },
                "AuthorizationType": "JWT",
                "AuthorizerId": {
                  "Ref": "HttpApiAuthorizerJwtAuthorizer"
                },
                "AuthorizationScopes": [
                  "ServerAccessScope/write"
                ]
              },
              "DependsOn": "HttpApiIntegrationBookATable"
            },
            "UpdateReservationLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "UpdateReservationLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationUpdateReservation": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "UpdateReservationLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRoutePutUpdatereservationOrderidVar": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "PUT /UpdateReservation/{OrderId}",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationUpdateReservation"
                      }
                    ]
                  ]
                },
                "AuthorizationType": "JWT",
                "AuthorizerId": {
                  "Ref": "HttpApiAuthorizerJwtAuthorizer"
                },
                "AuthorizationScopes": [
                  "ServerAccessScope/write"
                ]
              },
              "DependsOn": "HttpApiIntegrationUpdateReservation"
            },
            "GetAReservationLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetAReservationLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationGetAReservation": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "GetAReservationLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteGetGetareservationOrderidVar": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "GET /GetAReservation/{OrderId}",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationGetAReservation"
                      }
                    ]
                  ]
                },
                "AuthorizationType": "JWT",
                "AuthorizerId": {
                  "Ref": "HttpApiAuthorizerJwtAuthorizer"
                },
                "AuthorizationScopes": [
                  "ServerAccessScope/read"
                ]
              },
              "DependsOn": "HttpApiIntegrationGetAReservation"
            },
            "GetUsersReservationsLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetUsersReservationsLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationGetUsersReservations": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "GetUsersReservationsLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteGetGetusersreservationsUseridVar": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "GET /GetUsersReservations/{UserId}",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationGetUsersReservations"
                      }
                    ]
                  ]
                },
                "AuthorizationType": "JWT",
                "AuthorizerId": {
                  "Ref": "HttpApiAuthorizerJwtAuthorizer"
                },
                "AuthorizationScopes": [
                  "ServerAccessScope/read"
                ]
              },
              "DependsOn": "HttpApiIntegrationGetUsersReservations"
            },
            "DoneWithAReservationLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "DoneWithAReservationLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationDoneWithAReservation": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "DoneWithAReservationLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRoutePostDonewithareservationOrderidVarStatusVar": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "POST /DoneWithAReservation/{OrderId}/{Status}",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationDoneWithAReservation"
                      }
                    ]
                  ]
                },
                "AuthorizationType": "JWT",
                "AuthorizerId": {
                  "Ref": "HttpApiAuthorizerJwtAuthorizer"
                },
                "AuthorizationScopes": [
                  "ServerAccessScope/write"
                ]
              },
              "DependsOn": "HttpApiIntegrationDoneWithAReservation"
            },
            "AddMenuItemLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "AddMenuItemLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationAddMenuItem": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "AddMenuItemLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRoutePostAddmenuitem": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "POST /addMenuItem",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationAddMenuItem"
                      }
                    ]
                  ]
                },
                "AuthorizationType": "JWT",
                "AuthorizerId": {
                  "Ref": "HttpApiAuthorizerJwtAuthorizer"
                },
                "AuthorizationScopes": [
                  "ServerAccessScope/write"
                ]
              },
              "DependsOn": "HttpApiIntegrationAddMenuItem"
            },
            "CognitoUserPool": {
              "Type": "AWS::Cognito::UserPool",
              "Properties": {
                "UserPoolName": "Bistro-Nord-UserPool",
                "UsernameAttributes": [
                  "email"
                ],
                "AutoVerifiedAttributes": [
                  "email"
                ],
                "UserPoolTags": {
                  "git": "https://github.com/srinivas-pradhan/bistro-nord-backend",
                  "app": "Bistro-Nord"
                }
              }
            },
            "CognitoUserPoolClient": {
              "Type": "AWS::Cognito::UserPoolClient",
              "Properties": {
                "ClientName": "Bistro-Nord-UserPool-client",
                "AccessTokenValidity": "<REDACTED>",
                "TokenValidityUnits": "<REDACTED>",
                "UserPoolId": {
                  "Ref": "CognitoUserPool"
                },
                "GenerateSecret": "<REDACTED>",
                "ExplicitAuthFlows": [
                  "ADMIN_NO_SRP_AUTH"
                ],
                "AllowedOAuthFlows": [
                  "client_credentials"
                ],
                "AllowedOAuthFlowsUserPoolClient": true,
                "AllowedOAuthScopes": [
                  "ServerAccessScope/read",
                  "ServerAccessScope/write"
                ],
                "SupportedIdentityProviders": [
                  "COGNITO"
                ],
                "CallbackURLs": [
                  "https://example.com/signout"
                ]
              }
            },
            "UserPoolDomain": {
              "Type": "AWS::Cognito::UserPoolDomain",
              "Properties": {
                "UserPoolId": {
                  "Ref": "CognitoUserPool"
                },
                "Domain": "bistro-nord-backend"
              }
            },
            "UserPoolResourceServer": {
              "Type": "AWS::Cognito::UserPoolResourceServer",
              "Properties": {
                "UserPoolId": {
                  "Ref": "CognitoUserPool"
                },
                "Identifier": "ServerAccessScope",
                "Name": "ServerAccessScope",
                "Scopes": [
                  {
                    "ScopeName": "read",
                    "ScopeDescription": "GET Calls SCOPE"
                  },
                  {
                    "ScopeName": "write",
                    "ScopeDescription": "POST PUT DELETE Calls SCOPE"
                  }
                ]
              }
            },
            "BookATableDynamoDBTable": {
              "Type": "AWS::DynamoDB::Table",
              "Properties": {
                "TableName": "BookATable",
                "AttributeDefinitions": [
                  {
                    "AttributeName": "BookingRef",
                    "AttributeType": "S"
                  },
                  {
                    "AttributeName": "BookingNumber",
                    "AttributeType": "S"
                  }
                ],
                "KeySchema": [
                  {
                    "AttributeName": "BookingRef",
                    "KeyType": "HASH"
                  }
                ],
                "ProvisionedThroughput": {
                  "ReadCapacityUnits": 1,
                  "WriteCapacityUnits": 1
                },
                "GlobalSecondaryIndexes": [
                  {
                    "IndexName": "BookingNumber",
                    "KeySchema": [
                      {
                        "AttributeName": "BookingNumber",
                        "KeyType": "HASH"
                      }
                    ],
                    "Projection": {
                      "ProjectionType": "ALL"
                    },
                    "ProvisionedThroughput": {
                      "ReadCapacityUnits": 1,
                      "WriteCapacityUnits": 1
                    }
                  }
                ],
                "Tags": [
                  {
                    "Key": "git",
                    "Value": "https://github.com/srinivas-pradhan/bistro-nord-backend"
                  },
                  {
                    "Key": "app",
                    "Value": "Bistro-Nord"
                  }
                ]
              }
            },
            "DoneWithATableDynamoDBTable": {
              "Type": "AWS::DynamoDB::Table",
              "Properties": {
                "TableName": "DoneWithATable",
                "AttributeDefinitions": [
                  {
                    "AttributeName": "BookingRef",
                    "AttributeType": "S"
                  }
                ],
                "KeySchema": [
                  {
                    "AttributeName": "BookingRef",
                    "KeyType": "HASH"
                  }
                ],
                "ProvisionedThroughput": {
                  "ReadCapacityUnits": 1,
                  "WriteCapacityUnits": 1
                },
                "Tags": [
                  {
                    "Key": "git",
                    "Value": "https://github.com/srinivas-pradhan/bistro-nord-backend"
                  },
                  {
                    "Key": "app",
                    "Value": "Bistro-Nord"
                  }
                ]
              }
            },
            "MenuTableDynamoDBTable": {
              "Type": "AWS::DynamoDB::Table",
              "Properties": {
                "TableName": "MenuTable",
                "AttributeDefinitions": [
                  {
                    "AttributeName": "MenuItem",
                    "AttributeType": "S"
                  }
                ],
                "KeySchema": [
                  {
                    "AttributeName": "MenuItem",
                    "KeyType": "HASH"
                  }
                ],
                "ProvisionedThroughput": {
                  "ReadCapacityUnits": 1,
                  "WriteCapacityUnits": 1
                },
                "Tags": [
                  {
                    "Key": "git",
                    "Value": "https://github.com/srinivas-pradhan/bistro-nord-backend"
                  },
                  {
                    "Key": "app",
                    "Value": "Bistro-Nord"
                  }
                ]
              }
            },
            "WriteDynamoDBRole": {
              "Type": "AWS::IAM::Role",
              "Properties": {
                "Path": "/bistro-nord/bistro-nord-backend/lambda-role/",
                "RoleName": "WriteDynamoDBRole",
                "AssumeRolePolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Principal": {
                        "Service": [
                          "lambda.amazonaws.com"
                        ]
                      },
                      "Action": "sts:AssumeRole"
                    }
                  ]
                },
                "Policies": [
                  {
                    "PolicyName": "CloudWatchLogPolicy",
                    "PolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:CreateLogGroup",
                            "logs:CreateLogStream",
                            "logs:PutLogEvents",
                            "logs:TagResource"
                          ],
                          "Resource": [
                            {
                              "Fn::Join": [
                                ":",
                                [
                                  "arn:aws:logs",
                                  {
                                    "Ref": "AWS::Region"
                                  },
                                  {
                                    "Ref": "AWS::AccountId"
                                  },
                                  "log-group:/aws/lambda/*:*:*"
                                ]
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  },
                  {
                    "PolicyName": "WriteDynamoDBPolicy",
                    "PolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Action": [
                            "dynamodb:BatchGetItem",
                            "dynamodb:BatchWriteItem",
                            "dynamodb:ConditionCheckItem",
                            "dynamodb:PutItem",
                            "dynamodb:DescribeTable",
                            "dynamodb:DeleteItem",
                            "dynamodb:GetItem",
                            "dynamodb:Scan",
                            "dynamodb:Query",
                            "dynamodb:UpdateItem"
                          ],
                          "Resource": [
                            {
                              "Fn::Join": [
                                ":",
                                [
                                  "arn:aws:dynamodb",
                                  {
                                    "Ref": "AWS::Region"
                                  },
                                  {
                                    "Ref": "AWS::AccountId"
                                  },
                                  {
                                    "Fn::Join": [
                                      "/",
                                      [
                                        "table",
                                        {
                                          "Ref": "BookATableDynamoDBTable"
                                        }
                                      ]
                                    ]
                                  }
                                ]
                              ]
                            },
                            {
                              "Fn::Join": [
                                ":",
                                [
                                  "arn:aws:dynamodb",
                                  {
                                    "Ref": "AWS::Region"
                                  },
                                  {
                                    "Ref": "AWS::AccountId"
                                  },
                                  {
                                    "Fn::Join": [
                                      "/",
                                      [
                                        "table",
                                        {
                                          "Ref": "BookATableDynamoDBTable"
                                        },
                                        "index",
                                        "*"
                                      ]
                                    ]
                                  }
                                ]
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  }
                ]
              }
            },
            "ReadDynamoDBRole": {
              "Type": "AWS::IAM::Role",
              "Properties": {
                "Path": "/bistro-nord/bistro-nord-backend/lambda-role/",
                "RoleName": "ReadDynamoDBRole",
                "AssumeRolePolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Principal": {
                        "Service": [
                          "lambda.amazonaws.com"
                        ]
                      },
                      "Action": "sts:AssumeRole"
                    }
                  ]
                },
                "Policies": [
                  {
                    "PolicyName": "CloudWatchLogPolicy",
                    "PolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:CreateLogGroup",
                            "logs:CreateLogStream",
                            "logs:PutLogEvents",
                            "logs:TagResource"
                          ],
                          "Resource": [
                            {
                              "Fn::Join": [
                                ":",
                                [
                                  "arn:aws:logs",
                                  {
                                    "Ref": "AWS::Region"
                                  },
                                  {
                                    "Ref": "AWS::AccountId"
                                  },
                                  "log-group:/aws/lambda/*:*:*"
                                ]
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  },
                  {
                    "PolicyName": "ReadDynamoDBPolicy",
                    "PolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Action": [
                            "dynamodb:BatchGetItem",
                            "dynamodb:ConditionCheckItem",
                            "dynamodb:DescribeTable",
                            "dynamodb:GetItem",
                            "dynamodb:Scan",
                            "dynamodb:Query"
                          ],
                          "Resource": [
                            {
                              "Fn::Join": [
                                ":",
                                [
                                  "arn:aws:dynamodb",
                                  {
                                    "Ref": "AWS::Region"
                                  },
                                  {
                                    "Ref": "AWS::AccountId"
                                  },
                                  {
                                    "Fn::Join": [
                                      "/",
                                      [
                                        "table",
                                        {
                                          "Ref": "BookATableDynamoDBTable"
                                        }
                                      ]
                                    ]
                                  }
                                ]
                              ]
                            },
                            {
                              "Fn::Join": [
                                ":",
                                [
                                  "arn:aws:dynamodb",
                                  {
                                    "Ref": "AWS::Region"
                                  },
                                  {
                                    "Ref": "AWS::AccountId"
                                  },
                                  {
                                    "Fn::Join": [
                                      "/",
                                      [
                                        "table",
                                        {
                                          "Ref": "BookATableDynamoDBTable"
                                        },
                                        "index",
                                        "*"
                                      ]
                                    ]
                                  }
                                ]
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  }
                ]
              }
            },
            "DoneWithATableRole": {
              "Type": "AWS::IAM::Role",
              "Properties": {
                "Path": "/bistro-nord/bistro-nord-backend/lambda-role/",
                "RoleName": "DoneWithATableRole",
                "AssumeRolePolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Principal": {
                        "Service": [
                          "lambda.amazonaws.com"
                        ]
                      },
                      "Action": "sts:AssumeRole"
                    }
                  ]
                },
                "Policies": [
                  {
                    "PolicyName": "CloudWatchLogPolicy",
                    "PolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:CreateLogGroup",
                            "logs:CreateLogStream",
                            "logs:PutLogEvents",
                            "logs:TagResource"
                          ],
                          "Resource": [
                            {
                              "Fn::Join": [
                                ":",
                                [
                                  "arn:aws:logs",
                                  {
                                    "Ref": "AWS::Region"
                                  },
                                  {
                                    "Ref": "AWS::AccountId"
                                  },
                                  "log-group:/aws/lambda/*:*:*"
                                ]
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  },
                  {
                    "PolicyName": "DoneWithATableReadPolicy",
                    "PolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Action": [
                            "dynamodb:BatchGetItem",
                            "dynamodb:ConditionCheckItem",
                            "dynamodb:DescribeTable",
                            "dynamodb:GetItem",
                            "dynamodb:Scan",
                            "dynamodb:Query",
                            "dynamodb:DeleteItem"
                          ],
                          "Resource": [
                            {
                              "Fn::Join": [
                                ":",
                                [
                                  "arn:aws:dynamodb",
                                  {
                                    "Ref": "AWS::Region"
                                  },
                                  {
                                    "Ref": "AWS::AccountId"
                                  },
                                  {
                                    "Fn::Join": [
                                      "/",
                                      [
                                        "table",
                                        {
                                          "Ref": "BookATableDynamoDBTable"
                                        }
                                      ]
                                    ]
                                  }
                                ]
                              ]
                            },
                            {
                              "Fn::Join": [
                                ":",
                                [
                                  "arn:aws:dynamodb",
                                  {
                                    "Ref": "AWS::Region"
                                  },
                                  {
                                    "Ref": "AWS::AccountId"
                                  },
                                  {
                                    "Fn::Join": [
                                      "/",
                                      [
                                        "table",
                                        {
                                          "Ref": "BookATableDynamoDBTable"
                                        },
                                        "index",
                                        "*"
                                      ]
                                    ]
                                  }
                                ]
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  },
                  {
                    "PolicyName": "DoneWithATableWritePolicy",
                    "PolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Action": [
                            "dynamodb:BatchGetItem",
                            "dynamodb:BatchWriteItem",
                            "dynamodb:ConditionCheckItem",
                            "dynamodb:PutItem",
                            "dynamodb:DescribeTable",
                            "dynamodb:DeleteItem",
                            "dynamodb:GetItem",
                            "dynamodb:Scan",
                            "dynamodb:Query",
                            "dynamodb:UpdateItem"
                          ],
                          "Resource": [
                            {
                              "Fn::Join": [
                                ":",
                                [
                                  "arn:aws:dynamodb",
                                  {
                                    "Ref": "AWS::Region"
                                  },
                                  {
                                    "Ref": "AWS::AccountId"
                                  },
                                  {
                                    "Fn::Join": [
                                      "/",
                                      [
                                        "table",
                                        {
                                          "Ref": "DoneWithATableDynamoDBTable"
                                        }
                                      ]
                                    ]
                                  }
                                ]
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  }
                ]
              }
            },
            "MenuTableWriteDynamoDBRole": {
              "Type": "AWS::IAM::Role",
              "Properties": {
                "Path": "/bistro-nord/bistro-nord-backend/lambda-role/",
                "RoleName": "MenuTableWriteRole",
                "AssumeRolePolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Principal": {
                        "Service": [
                          "lambda.amazonaws.com"
                        ]
                      },
                      "Action": "sts:AssumeRole"
                    }
                  ]
                },
                "Policies": [
                  {
                    "PolicyName": "CloudWatchLogPolicy",
                    "PolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:CreateLogGroup",
                            "logs:CreateLogStream",
                            "logs:PutLogEvents",
                            "logs:TagResource"
                          ],
                          "Resource": [
                            {
                              "Fn::Join": [
                                ":",
                                [
                                  "arn:aws:logs",
                                  {
                                    "Ref": "AWS::Region"
                                  },
                                  {
                                    "Ref": "AWS::AccountId"
                                  },
                                  "log-group:/aws/lambda/*:*:*"
                                ]
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  },
                  {
                    "PolicyName": "MenuTableWritePolicy",
                    "PolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Action": [
                            "dynamodb:BatchGetItem",
                            "dynamodb:BatchWriteItem",
                            "dynamodb:ConditionCheckItem",
                            "dynamodb:PutItem",
                            "dynamodb:DescribeTable",
                            "dynamodb:DeleteItem",
                            "dynamodb:GetItem",
                            "dynamodb:Scan",
                            "dynamodb:Query",
                            "dynamodb:UpdateItem"
                          ],
                          "Resource": [
                            {
                              "Fn::Join": [
                                ":",
                                [
                                  "arn:aws:dynamodb",
                                  {
                                    "Ref": "AWS::Region"
                                  },
                                  {
                                    "Ref": "AWS::AccountId"
                                  },
                                  {
                                    "Fn::Join": [
                                      "/",
                                      [
                                        "table",
                                        {
                                          "Ref": "MenuTableDynamoDBTable"
                                        }
                                      ]
                                    ]
                                  }
                                ]
                              ]
                            },
                            {
                              "Fn::Join": [
                                ":",
                                [
                                  "arn:aws:dynamodb",
                                  {
                                    "Ref": "AWS::Region"
                                  },
                                  {
                                    "Ref": "AWS::AccountId"
                                  },
                                  {
                                    "Fn::Join": [
                                      "/",
                                      [
                                        "table",
                                        {
                                          "Ref": "BookATableDynamoDBTable"
                                        },
                                        "index",
                                        "*"
                                      ]
                                    ]
                                  }
                                ]
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  }
                ]
              }
            }
          },
          "Outputs": {
            "ServerlessDeploymentBucketName": {
              "Value": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "Export": {
                "Name": "sls-bistro-nord-backend-dev-ServerlessDeploymentBucketName"
              }
            },
            "MiddysdkLambdaLayerQualifiedArn": {
              "Description": "Current Lambda layer version",
              "Value": {
                "Ref": "MiddysdkLambdaLayer"
              },
              "Export": {
                "Name": "sls-bistro-nord-backend-dev-MiddysdkLambdaLayerQualifiedArn"
              }
            },
            "MiddysdkLambdaLayerHash": {
              "Description": "Current Lambda layer hash",
              "Value": "278e11f3ca238f3b8899bc14ee07271007e7a2fd",
              "Export": {
                "Name": "sls-bistro-nord-backend-dev-MiddysdkLambdaLayerHash"
              }
            },
            "MiddysdkLambdaLayerS3Key": {
              "Description": "Current Lambda layer S3Key",
              "Value": "serverless/bistro-nord-backend/dev/1738320153999-2025-01-31T10:42:33.999Z/middysdk.zip",
              "Export": {
                "Name": "sls-bistro-nord-backend-dev-MiddysdkLambdaLayerS3Key"
              }
            },
            "AwssdkLambdaLayerQualifiedArn": {
              "Description": "Current Lambda layer version",
              "Value": {
                "Ref": "AwssdkLambdaLayer"
              },
              "Export": {
                "Name": "sls-bistro-nord-backend-dev-AwssdkLambdaLayerQualifiedArn"
              }
            },
            "AwssdkLambdaLayerHash": {
              "Description": "Current Lambda layer hash",
              "Value": "25154eaadc14896f6c19db4d852b5887d5212463",
              "Export": {
                "Name": "sls-bistro-nord-backend-dev-AwssdkLambdaLayerHash"
              }
            },
            "AwssdkLambdaLayerS3Key": {
              "Description": "Current Lambda layer S3Key",
              "Value": "serverless/bistro-nord-backend/dev/1738324788715-2025-01-31T11:59:48.715Z/awssdk.zip",
              "Export": {
                "Name": "sls-bistro-nord-backend-dev-AwssdkLambdaLayerS3Key"
              }
            },
            "BookATableLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "BookATableLambdaVersion9MyjqD7eqpAz5txAW66W8eZIOKsaSFm47FbkqXl0r2U"
              },
              "Export": {
                "Name": "sls-bistro-nord-backend-dev-BookATableLambdaFunctionQualifiedArn"
              }
            },
            "UpdateReservationLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "UpdateReservationLambdaVersionsZImiSjY87jbFs3QTBdvIuNldWCzYZeljRanm4MRNU"
              },
              "Export": {
                "Name": "sls-bistro-nord-backend-dev-UpdateReservationLambdaFunctionQualifiedArn"
              }
            },
            "GetAReservationLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetAReservationLambdaVersionQHcyBveSomm3blpQG1AOindymJ0iNsyawgRLQVEtHs"
              },
              "Export": {
                "Name": "sls-bistro-nord-backend-dev-GetAReservationLambdaFunctionQualifiedArn"
              }
            },
            "GetUsersReservationsLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetUsersReservationsLambdaVersionH7GFMwz5cpITNKKcZOfjmTt6SSr7bX4322dudx1vJY"
              },
              "Export": {
                "Name": "sls-bistro-nord-backend-dev-GetUsersReservationsLambdaFunctionQualifiedArn"
              }
            },
            "DoneWithAReservationLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "DoneWithAReservationLambdaVersion8zuAiT4T0u9tYo5SyH3hudQpEwIK92MgzX2IMOvHQ"
              },
              "Export": {
                "Name": "sls-bistro-nord-backend-dev-DoneWithAReservationLambdaFunctionQualifiedArn"
              }
            },
            "AddMenuItemLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "AddMenuItemLambdaVersionD4WVOWg0Ko5a9sJIpRFwXg9o8EaaI671Uw8RMc5ks"
              },
              "Export": {
                "Name": "sls-bistro-nord-backend-dev-AddMenuItemLambdaFunctionQualifiedArn"
              }
            },
            "HttpApiId": {
              "Description": "Id of the HTTP API",
              "Value": {
                "Ref": "HttpApi"
              },
              "Export": {
                "Name": "sls-bistro-nord-backend-dev-HttpApiId"
              }
            },
            "HttpApiUrl": {
              "Description": "URL of the HTTP API",
              "Value": {
                "Fn::Join": [
                  "",
                  [
                    "https://",
                    {
                      "Ref": "HttpApi"
                    },
                    ".execute-api.",
                    {
                      "Ref": "AWS::Region"
                    },
                    ".",
                    {
                      "Ref": "AWS::URLSuffix"
                    }
                  ]
                ]
              },
              "Export": {
                "Name": "sls-bistro-nord-backend-dev-HttpApiUrl"
              }
            }
          }
        },
        "coreCloudFormationTemplate": {
          "AWSTemplateFormatVersion": "2010-09-09",
          "Description": "The AWS CloudFormation template for this Serverless application",
          "Resources": {
            "ServerlessDeploymentBucket": {
              "Type": "AWS::S3::Bucket",
              "Properties": {
                "BucketEncryption": {
                  "ServerSideEncryptionConfiguration": [
                    {
                      "ServerSideEncryptionByDefault": {
                        "SSEAlgorithm": "AES256"
                      }
                    }
                  ]
                }
              }
            },
            "ServerlessDeploymentBucketPolicy": {
              "Type": "AWS::S3::BucketPolicy",
              "Properties": {
                "Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "PolicyDocument": {
                  "Statement": [
                    {
                      "Action": "s3:*",
                      "Effect": "Deny",
                      "Principal": "*",
                      "Resource": [
                        {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":s3:::",
                              {
                                "Ref": "ServerlessDeploymentBucket"
                              },
                              "/*"
                            ]
                          ]
                        },
                        {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":s3:::",
                              {
                                "Ref": "ServerlessDeploymentBucket"
                              }
                            ]
                          ]
                        }
                      ],
                      "Condition": {
                        "Bool": {
                          "aws:SecureTransport": false
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "Outputs": {
            "ServerlessDeploymentBucketName": {
              "Value": {
                "Ref": "ServerlessDeploymentBucket"
              }
            }
          }
        },
        "vpc": {}
      },
      "package": {
        "patterns": [
          "!package.zip"
        ],
        "artifactsS3KeyDirname": "serverless/bistro-nord-backend/dev/code-artifacts",
        "artifact": "/Users/srinivas/Documents/repos/bistro-nord-backend/.serverless/bistro-nord-backend.zip",
        "artifactDirectoryName": "serverless/bistro-nord-backend/dev/1738810062460-2025-02-06T02:47:42.460Z"
      },
      "layers": {
        "awssdk": {
          "path": "aws-sdk-layer",
          "description": "SDK Layer for AWS Node Package.",
          "package": {
            "artifact": "/Users/srinivas/Documents/repos/bistro-nord-backend/.serverless/awssdk.zip"
          },
          "artifactAlreadyUploaded": true
        },
        "middysdk": {
          "path": "middy-layer",
          "description": "Middy Layer for JS Middleware Setup.",
          "package": {
            "artifact": "/Users/srinivas/Documents/repos/bistro-nord-backend/.serverless/middysdk.zip"
          },
          "artifactAlreadyUploaded": true
        }
      },
      "functions": {
        "bookATable": {
          "handler": "src/bookATable/handler.TableBookHandler",
          "role": {
            "Fn::GetAtt": [
              "WriteDynamoDBRole",
              "Arn"
            ]
          },
          "environment": {
            "TABLE_NAME": "BookATable"
          },
          "layers": [
            {
              "Ref": "AwssdkLambdaLayer"
            },
            {
              "Ref": "MiddysdkLambdaLayer"
            }
          ],
          "events": [
            {
              "httpApi": {
                "method": "POST",
                "path": "/bookATable",
                "authorizer": {
                  "name": "JwtAuthorizer",
                  "scopes": [
                    "ServerAccessScope/write"
                  ]
                }
              },
              "resolvedMethod": "POST",
              "resolvedPath": "/bookATable"
            }
          ],
          "name": "bistro-nord-backend-dev-bookATable",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "BookATableLambdaVersion9MyjqD7eqpAz5txAW66W8eZIOKsaSFm47FbkqXl0r2U"
        },
        "UpdateReservation": {
          "handler": "src/UpdateReservation/handler.UpdateReservationHandler",
          "role": {
            "Fn::GetAtt": [
              "WriteDynamoDBRole",
              "Arn"
            ]
          },
          "environment": {
            "TABLE_NAME": "BookATable",
            "BOOKING_NUMBER": "BookingNumber",
            "BOOKING_REF": "BookingRef"
          },
          "layers": [
            {
              "Ref": "AwssdkLambdaLayer"
            },
            {
              "Ref": "MiddysdkLambdaLayer"
            }
          ],
          "events": [
            {
              "httpApi": {
                "method": "PUT",
                "path": "/UpdateReservation/{OrderId}",
                "authorizer": {
                  "name": "JwtAuthorizer",
                  "scopes": [
                    "ServerAccessScope/write"
                  ]
                }
              },
              "resolvedMethod": "PUT",
              "resolvedPath": "/UpdateReservation/{OrderId}"
            }
          ],
          "name": "bistro-nord-backend-dev-UpdateReservation",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "UpdateReservationLambdaVersionsZImiSjY87jbFs3QTBdvIuNldWCzYZeljRanm4MRNU"
        },
        "GetAReservation": {
          "handler": "src/GetAReservation/handler.GetAReservationHandler",
          "role": {
            "Fn::GetAtt": [
              "ReadDynamoDBRole",
              "Arn"
            ]
          },
          "environment": {
            "TABLE_NAME": "BookATable",
            "BOOKING_NUMBER": "BookingNumber"
          },
          "layers": [
            {
              "Ref": "AwssdkLambdaLayer"
            },
            {
              "Ref": "MiddysdkLambdaLayer"
            }
          ],
          "events": [
            {
              "httpApi": {
                "method": "GET",
                "path": "/GetAReservation/{OrderId}",
                "authorizer": {
                  "name": "JwtAuthorizer",
                  "scopes": [
                    "ServerAccessScope/read"
                  ]
                }
              },
              "resolvedMethod": "GET",
              "resolvedPath": "/GetAReservation/{OrderId}"
            }
          ],
          "name": "bistro-nord-backend-dev-GetAReservation",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "GetAReservationLambdaVersionQHcyBveSomm3blpQG1AOindymJ0iNsyawgRLQVEtHs"
        },
        "GetUsersReservations": {
          "handler": "src/GetUsersReservations/handler.GetUsersReservationsHandler",
          "role": {
            "Fn::GetAtt": [
              "ReadDynamoDBRole",
              "Arn"
            ]
          },
          "environment": {
            "TABLE_NAME": "BookATable"
          },
          "layers": [
            {
              "Ref": "AwssdkLambdaLayer"
            },
            {
              "Ref": "MiddysdkLambdaLayer"
            }
          ],
          "events": [
            {
              "httpApi": {
                "method": "GET",
                "path": "/GetUsersReservations/{UserId}",
                "authorizer": {
                  "name": "JwtAuthorizer",
                  "scopes": [
                    "ServerAccessScope/read"
                  ]
                }
              },
              "resolvedMethod": "GET",
              "resolvedPath": "/GetUsersReservations/{UserId}"
            }
          ],
          "name": "bistro-nord-backend-dev-GetUsersReservations",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "GetUsersReservationsLambdaVersionH7GFMwz5cpITNKKcZOfjmTt6SSr7bX4322dudx1vJY"
        },
        "DoneWithAReservation": {
          "handler": "src/DoneWithAReservation/handler.DoneWithAReservationHandler",
          "role": {
            "Fn::GetAtt": [
              "DoneWithATableRole",
              "Arn"
            ]
          },
          "environment": {
            "TABLE_NAME": "BookATable",
            "DONE_TABLE_NAME": "DoneWithATable",
            "BOOKING_NUMBER": "BookingNumber"
          },
          "layers": [
            {
              "Ref": "AwssdkLambdaLayer"
            },
            {
              "Ref": "MiddysdkLambdaLayer"
            }
          ],
          "events": [
            {
              "httpApi": {
                "method": "POST",
                "path": "/DoneWithAReservation/{OrderId}/{Status}",
                "authorizer": {
                  "name": "JwtAuthorizer",
                  "scopes": [
                    "ServerAccessScope/write"
                  ]
                }
              },
              "resolvedMethod": "POST",
              "resolvedPath": "/DoneWithAReservation/{OrderId}/{Status}"
            }
          ],
          "name": "bistro-nord-backend-dev-DoneWithAReservation",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "DoneWithAReservationLambdaVersion8zuAiT4T0u9tYo5SyH3hudQpEwIK92MgzX2IMOvHQ"
        },
        "addMenuItem": {
          "handler": "src/addMenuItem/handler.addMenuItemHandler",
          "role": {
            "Fn::GetAtt": [
              "MenuTableWriteDynamoDBRole",
              "Arn"
            ]
          },
          "environment": {
            "TABLE_NAME": "MenuTable"
          },
          "layers": [
            {
              "Ref": "AwssdkLambdaLayer"
            },
            {
              "Ref": "MiddysdkLambdaLayer"
            }
          ],
          "events": [
            {
              "httpApi": {
                "method": "POST",
                "path": "/addMenuItem",
                "authorizer": {
                  "name": "JwtAuthorizer",
                  "scopes": [
                    "ServerAccessScope/write"
                  ]
                }
              },
              "resolvedMethod": "POST",
              "resolvedPath": "/addMenuItem"
            }
          ],
          "name": "bistro-nord-backend-dev-addMenuItem",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "AddMenuItemLambdaVersionD4WVOWg0Ko5a9sJIpRFwXg9o8EaaI671Uw8RMc5ks"
        }
      },
      "resources": {
        "Resources": {
          "CognitoUserPool": {
            "Type": "AWS::Cognito::UserPool",
            "Properties": {
              "UserPoolName": "Bistro-Nord-UserPool",
              "UsernameAttributes": [
                "email"
              ],
              "AutoVerifiedAttributes": [
                "email"
              ],
              "UserPoolTags": {
                "git": "https://github.com/srinivas-pradhan/bistro-nord-backend",
                "app": "Bistro-Nord"
              }
            }
          },
          "CognitoUserPoolClient": {
            "Type": "AWS::Cognito::UserPoolClient",
            "Properties": {
              "ClientName": "Bistro-Nord-UserPool-client",
              "AccessTokenValidity": "<REDACTED>",
              "TokenValidityUnits": "<REDACTED>",
              "UserPoolId": {
                "Ref": "CognitoUserPool"
              },
              "GenerateSecret": "<REDACTED>",
              "ExplicitAuthFlows": [
                "ADMIN_NO_SRP_AUTH"
              ],
              "AllowedOAuthFlows": [
                "client_credentials"
              ],
              "AllowedOAuthFlowsUserPoolClient": true,
              "AllowedOAuthScopes": [
                "ServerAccessScope/read",
                "ServerAccessScope/write"
              ],
              "SupportedIdentityProviders": [
                "COGNITO"
              ],
              "CallbackURLs": [
                "https://example.com/signout"
              ]
            }
          },
          "UserPoolDomain": {
            "Type": "AWS::Cognito::UserPoolDomain",
            "Properties": {
              "UserPoolId": {
                "Ref": "CognitoUserPool"
              },
              "Domain": "bistro-nord-backend"
            }
          },
          "UserPoolResourceServer": {
            "Type": "AWS::Cognito::UserPoolResourceServer",
            "Properties": {
              "UserPoolId": {
                "Ref": "CognitoUserPool"
              },
              "Identifier": "ServerAccessScope",
              "Name": "ServerAccessScope",
              "Scopes": [
                {
                  "ScopeName": "read",
                  "ScopeDescription": "GET Calls SCOPE"
                },
                {
                  "ScopeName": "write",
                  "ScopeDescription": "POST PUT DELETE Calls SCOPE"
                }
              ]
            }
          },
          "BookATableDynamoDBTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "BookATable",
              "AttributeDefinitions": [
                {
                  "AttributeName": "BookingRef",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "BookingNumber",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "BookingRef",
                  "KeyType": "HASH"
                }
              ],
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 1,
                "WriteCapacityUnits": 1
              },
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "BookingNumber",
                  "KeySchema": [
                    {
                      "AttributeName": "BookingNumber",
                      "KeyType": "HASH"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  },
                  "ProvisionedThroughput": {
                    "ReadCapacityUnits": 1,
                    "WriteCapacityUnits": 1
                  }
                }
              ],
              "Tags": [
                {
                  "Key": "git",
                  "Value": "https://github.com/srinivas-pradhan/bistro-nord-backend"
                },
                {
                  "Key": "app",
                  "Value": "Bistro-Nord"
                }
              ]
            }
          },
          "DoneWithATableDynamoDBTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "DoneWithATable",
              "AttributeDefinitions": [
                {
                  "AttributeName": "BookingRef",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "BookingRef",
                  "KeyType": "HASH"
                }
              ],
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 1,
                "WriteCapacityUnits": 1
              },
              "Tags": [
                {
                  "Key": "git",
                  "Value": "https://github.com/srinivas-pradhan/bistro-nord-backend"
                },
                {
                  "Key": "app",
                  "Value": "Bistro-Nord"
                }
              ]
            }
          },
          "MenuTableDynamoDBTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "MenuTable",
              "AttributeDefinitions": [
                {
                  "AttributeName": "MenuItem",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "MenuItem",
                  "KeyType": "HASH"
                }
              ],
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 1,
                "WriteCapacityUnits": 1
              },
              "Tags": [
                {
                  "Key": "git",
                  "Value": "https://github.com/srinivas-pradhan/bistro-nord-backend"
                },
                {
                  "Key": "app",
                  "Value": "Bistro-Nord"
                }
              ]
            }
          },
          "WriteDynamoDBRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "Path": "/bistro-nord/bistro-nord-backend/lambda-role/",
              "RoleName": "WriteDynamoDBRole",
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": "sts:AssumeRole"
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": "CloudWatchLogPolicy",
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogGroup",
                          "logs:CreateLogStream",
                          "logs:PutLogEvents",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Join": [
                              ":",
                              [
                                "arn:aws:logs",
                                {
                                  "Ref": "AWS::Region"
                                },
                                {
                                  "Ref": "AWS::AccountId"
                                },
                                "log-group:/aws/lambda/*:*:*"
                              ]
                            ]
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "PolicyName": "WriteDynamoDBPolicy",
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "dynamodb:BatchGetItem",
                          "dynamodb:BatchWriteItem",
                          "dynamodb:ConditionCheckItem",
                          "dynamodb:PutItem",
                          "dynamodb:DescribeTable",
                          "dynamodb:DeleteItem",
                          "dynamodb:GetItem",
                          "dynamodb:Scan",
                          "dynamodb:Query",
                          "dynamodb:UpdateItem"
                        ],
                        "Resource": [
                          {
                            "Fn::Join": [
                              ":",
                              [
                                "arn:aws:dynamodb",
                                {
                                  "Ref": "AWS::Region"
                                },
                                {
                                  "Ref": "AWS::AccountId"
                                },
                                {
                                  "Fn::Join": [
                                    "/",
                                    [
                                      "table",
                                      {
                                        "Ref": "BookATableDynamoDBTable"
                                      }
                                    ]
                                  ]
                                }
                              ]
                            ]
                          },
                          {
                            "Fn::Join": [
                              ":",
                              [
                                "arn:aws:dynamodb",
                                {
                                  "Ref": "AWS::Region"
                                },
                                {
                                  "Ref": "AWS::AccountId"
                                },
                                {
                                  "Fn::Join": [
                                    "/",
                                    [
                                      "table",
                                      {
                                        "Ref": "BookATableDynamoDBTable"
                                      },
                                      "index",
                                      "*"
                                    ]
                                  ]
                                }
                              ]
                            ]
                          }
                        ]
                      }
                    ]
                  }
                }
              ]
            }
          },
          "ReadDynamoDBRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "Path": "/bistro-nord/bistro-nord-backend/lambda-role/",
              "RoleName": "ReadDynamoDBRole",
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": "sts:AssumeRole"
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": "CloudWatchLogPolicy",
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogGroup",
                          "logs:CreateLogStream",
                          "logs:PutLogEvents",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Join": [
                              ":",
                              [
                                "arn:aws:logs",
                                {
                                  "Ref": "AWS::Region"
                                },
                                {
                                  "Ref": "AWS::AccountId"
                                },
                                "log-group:/aws/lambda/*:*:*"
                              ]
                            ]
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "PolicyName": "ReadDynamoDBPolicy",
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "dynamodb:BatchGetItem",
                          "dynamodb:ConditionCheckItem",
                          "dynamodb:DescribeTable",
                          "dynamodb:GetItem",
                          "dynamodb:Scan",
                          "dynamodb:Query"
                        ],
                        "Resource": [
                          {
                            "Fn::Join": [
                              ":",
                              [
                                "arn:aws:dynamodb",
                                {
                                  "Ref": "AWS::Region"
                                },
                                {
                                  "Ref": "AWS::AccountId"
                                },
                                {
                                  "Fn::Join": [
                                    "/",
                                    [
                                      "table",
                                      {
                                        "Ref": "BookATableDynamoDBTable"
                                      }
                                    ]
                                  ]
                                }
                              ]
                            ]
                          },
                          {
                            "Fn::Join": [
                              ":",
                              [
                                "arn:aws:dynamodb",
                                {
                                  "Ref": "AWS::Region"
                                },
                                {
                                  "Ref": "AWS::AccountId"
                                },
                                {
                                  "Fn::Join": [
                                    "/",
                                    [
                                      "table",
                                      {
                                        "Ref": "BookATableDynamoDBTable"
                                      },
                                      "index",
                                      "*"
                                    ]
                                  ]
                                }
                              ]
                            ]
                          }
                        ]
                      }
                    ]
                  }
                }
              ]
            }
          },
          "DoneWithATableRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "Path": "/bistro-nord/bistro-nord-backend/lambda-role/",
              "RoleName": "DoneWithATableRole",
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": "sts:AssumeRole"
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": "CloudWatchLogPolicy",
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogGroup",
                          "logs:CreateLogStream",
                          "logs:PutLogEvents",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Join": [
                              ":",
                              [
                                "arn:aws:logs",
                                {
                                  "Ref": "AWS::Region"
                                },
                                {
                                  "Ref": "AWS::AccountId"
                                },
                                "log-group:/aws/lambda/*:*:*"
                              ]
                            ]
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "PolicyName": "DoneWithATableReadPolicy",
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "dynamodb:BatchGetItem",
                          "dynamodb:ConditionCheckItem",
                          "dynamodb:DescribeTable",
                          "dynamodb:GetItem",
                          "dynamodb:Scan",
                          "dynamodb:Query",
                          "dynamodb:DeleteItem"
                        ],
                        "Resource": [
                          {
                            "Fn::Join": [
                              ":",
                              [
                                "arn:aws:dynamodb",
                                {
                                  "Ref": "AWS::Region"
                                },
                                {
                                  "Ref": "AWS::AccountId"
                                },
                                {
                                  "Fn::Join": [
                                    "/",
                                    [
                                      "table",
                                      {
                                        "Ref": "BookATableDynamoDBTable"
                                      }
                                    ]
                                  ]
                                }
                              ]
                            ]
                          },
                          {
                            "Fn::Join": [
                              ":",
                              [
                                "arn:aws:dynamodb",
                                {
                                  "Ref": "AWS::Region"
                                },
                                {
                                  "Ref": "AWS::AccountId"
                                },
                                {
                                  "Fn::Join": [
                                    "/",
                                    [
                                      "table",
                                      {
                                        "Ref": "BookATableDynamoDBTable"
                                      },
                                      "index",
                                      "*"
                                    ]
                                  ]
                                }
                              ]
                            ]
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "PolicyName": "DoneWithATableWritePolicy",
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "dynamodb:BatchGetItem",
                          "dynamodb:BatchWriteItem",
                          "dynamodb:ConditionCheckItem",
                          "dynamodb:PutItem",
                          "dynamodb:DescribeTable",
                          "dynamodb:DeleteItem",
                          "dynamodb:GetItem",
                          "dynamodb:Scan",
                          "dynamodb:Query",
                          "dynamodb:UpdateItem"
                        ],
                        "Resource": [
                          {
                            "Fn::Join": [
                              ":",
                              [
                                "arn:aws:dynamodb",
                                {
                                  "Ref": "AWS::Region"
                                },
                                {
                                  "Ref": "AWS::AccountId"
                                },
                                {
                                  "Fn::Join": [
                                    "/",
                                    [
                                      "table",
                                      {
                                        "Ref": "DoneWithATableDynamoDBTable"
                                      }
                                    ]
                                  ]
                                }
                              ]
                            ]
                          }
                        ]
                      }
                    ]
                  }
                }
              ]
            }
          },
          "MenuTableWriteDynamoDBRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "Path": "/bistro-nord/bistro-nord-backend/lambda-role/",
              "RoleName": "MenuTableWriteRole",
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": "sts:AssumeRole"
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": "CloudWatchLogPolicy",
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogGroup",
                          "logs:CreateLogStream",
                          "logs:PutLogEvents",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Join": [
                              ":",
                              [
                                "arn:aws:logs",
                                {
                                  "Ref": "AWS::Region"
                                },
                                {
                                  "Ref": "AWS::AccountId"
                                },
                                "log-group:/aws/lambda/*:*:*"
                              ]
                            ]
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "PolicyName": "MenuTableWritePolicy",
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "dynamodb:BatchGetItem",
                          "dynamodb:BatchWriteItem",
                          "dynamodb:ConditionCheckItem",
                          "dynamodb:PutItem",
                          "dynamodb:DescribeTable",
                          "dynamodb:DeleteItem",
                          "dynamodb:GetItem",
                          "dynamodb:Scan",
                          "dynamodb:Query",
                          "dynamodb:UpdateItem"
                        ],
                        "Resource": [
                          {
                            "Fn::Join": [
                              ":",
                              [
                                "arn:aws:dynamodb",
                                {
                                  "Ref": "AWS::Region"
                                },
                                {
                                  "Ref": "AWS::AccountId"
                                },
                                {
                                  "Fn::Join": [
                                    "/",
                                    [
                                      "table",
                                      {
                                        "Ref": "MenuTableDynamoDBTable"
                                      }
                                    ]
                                  ]
                                }
                              ]
                            ]
                          },
                          {
                            "Fn::Join": [
                              ":",
                              [
                                "arn:aws:dynamodb",
                                {
                                  "Ref": "AWS::Region"
                                },
                                {
                                  "Ref": "AWS::AccountId"
                                },
                                {
                                  "Fn::Join": [
                                    "/",
                                    [
                                      "table",
                                      {
                                        "Ref": "BookATableDynamoDBTable"
                                      },
                                      "index",
                                      "*"
                                    ]
                                  ]
                                }
                              ]
                            ]
                          }
                        ]
                      }
                    ]
                  }
                }
              ]
            }
          }
        },
        "Outputs": {}
      }
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs20.x",
      "httpApi": {
        "authorizers": {
          "JwtAuthorizer": {
            "type": "jwt",
            "identitySource": "$request.header.Authorization",
            "issuerUrl": {
              "Fn::GetAtt": [
                "CognitoUserPool",
                "ProviderURL"
              ]
            },
            "audience": [
              {
                "Ref": "CognitoUserPoolClient"
              }
            ]
          }
        }
      },
      "stage": "dev",
      "region": "us-east-1",
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "BookATableLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/bistro-nord-backend-dev-bookATable"
            }
          },
          "UpdateReservationLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/bistro-nord-backend-dev-UpdateReservation"
            }
          },
          "GetAReservationLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/bistro-nord-backend-dev-GetAReservation"
            }
          },
          "GetUsersReservationsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/bistro-nord-backend-dev-GetUsersReservations"
            }
          },
          "DoneWithAReservationLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/bistro-nord-backend-dev-DoneWithAReservation"
            }
          },
          "AddMenuItemLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/bistro-nord-backend-dev-addMenuItem"
            }
          },
          "MiddysdkLambdaLayer": {
            "Type": "AWS::Lambda::LayerVersion",
            "Properties": {
              "Content": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/bistro-nord-backend/dev/1738320153999-2025-01-31T10:42:33.999Z/middysdk.zip"
              },
              "LayerName": "middysdk",
              "Description": "Middy Layer for JS Middleware Setup."
            }
          },
          "AwssdkLambdaLayer": {
            "Type": "AWS::Lambda::LayerVersion",
            "Properties": {
              "Content": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/bistro-nord-backend/dev/1738324788715-2025-01-31T11:59:48.715Z/awssdk.zip"
              },
              "LayerName": "awssdk",
              "Description": "SDK Layer for AWS Node Package."
            }
          },
          "BookATableLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/bistro-nord-backend/dev/1738810062460-2025-02-06T02:47:42.460Z/bistro-nord-backend.zip"
              },
              "Handler": "src/bookATable/handler.TableBookHandler",
              "Runtime": "nodejs20.x",
              "FunctionName": "bistro-nord-backend-dev-bookATable",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "TABLE_NAME": "BookATable"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "WriteDynamoDBRole",
                  "Arn"
                ]
              },
              "Layers": [
                {
                  "Ref": "AwssdkLambdaLayer"
                },
                {
                  "Ref": "MiddysdkLambdaLayer"
                }
              ]
            },
            "DependsOn": [
              "BookATableLogGroup",
              "WriteDynamoDBRole"
            ]
          },
          "UpdateReservationLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/bistro-nord-backend/dev/1738810062460-2025-02-06T02:47:42.460Z/bistro-nord-backend.zip"
              },
              "Handler": "src/UpdateReservation/handler.UpdateReservationHandler",
              "Runtime": "nodejs20.x",
              "FunctionName": "bistro-nord-backend-dev-UpdateReservation",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "TABLE_NAME": "BookATable",
                  "BOOKING_NUMBER": "BookingNumber",
                  "BOOKING_REF": "BookingRef"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "WriteDynamoDBRole",
                  "Arn"
                ]
              },
              "Layers": [
                {
                  "Ref": "AwssdkLambdaLayer"
                },
                {
                  "Ref": "MiddysdkLambdaLayer"
                }
              ]
            },
            "DependsOn": [
              "UpdateReservationLogGroup",
              "WriteDynamoDBRole"
            ]
          },
          "GetAReservationLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/bistro-nord-backend/dev/1738810062460-2025-02-06T02:47:42.460Z/bistro-nord-backend.zip"
              },
              "Handler": "src/GetAReservation/handler.GetAReservationHandler",
              "Runtime": "nodejs20.x",
              "FunctionName": "bistro-nord-backend-dev-GetAReservation",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "TABLE_NAME": "BookATable",
                  "BOOKING_NUMBER": "BookingNumber"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "ReadDynamoDBRole",
                  "Arn"
                ]
              },
              "Layers": [
                {
                  "Ref": "AwssdkLambdaLayer"
                },
                {
                  "Ref": "MiddysdkLambdaLayer"
                }
              ]
            },
            "DependsOn": [
              "GetAReservationLogGroup",
              "ReadDynamoDBRole"
            ]
          },
          "GetUsersReservationsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/bistro-nord-backend/dev/1738810062460-2025-02-06T02:47:42.460Z/bistro-nord-backend.zip"
              },
              "Handler": "src/GetUsersReservations/handler.GetUsersReservationsHandler",
              "Runtime": "nodejs20.x",
              "FunctionName": "bistro-nord-backend-dev-GetUsersReservations",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "TABLE_NAME": "BookATable"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "ReadDynamoDBRole",
                  "Arn"
                ]
              },
              "Layers": [
                {
                  "Ref": "AwssdkLambdaLayer"
                },
                {
                  "Ref": "MiddysdkLambdaLayer"
                }
              ]
            },
            "DependsOn": [
              "GetUsersReservationsLogGroup",
              "ReadDynamoDBRole"
            ]
          },
          "DoneWithAReservationLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/bistro-nord-backend/dev/1738810062460-2025-02-06T02:47:42.460Z/bistro-nord-backend.zip"
              },
              "Handler": "src/DoneWithAReservation/handler.DoneWithAReservationHandler",
              "Runtime": "nodejs20.x",
              "FunctionName": "bistro-nord-backend-dev-DoneWithAReservation",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "TABLE_NAME": "BookATable",
                  "DONE_TABLE_NAME": "DoneWithATable",
                  "BOOKING_NUMBER": "BookingNumber"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "DoneWithATableRole",
                  "Arn"
                ]
              },
              "Layers": [
                {
                  "Ref": "AwssdkLambdaLayer"
                },
                {
                  "Ref": "MiddysdkLambdaLayer"
                }
              ]
            },
            "DependsOn": [
              "DoneWithAReservationLogGroup",
              "DoneWithATableRole"
            ]
          },
          "AddMenuItemLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/bistro-nord-backend/dev/1738810062460-2025-02-06T02:47:42.460Z/bistro-nord-backend.zip"
              },
              "Handler": "src/addMenuItem/handler.addMenuItemHandler",
              "Runtime": "nodejs20.x",
              "FunctionName": "bistro-nord-backend-dev-addMenuItem",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "TABLE_NAME": "MenuTable"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "MenuTableWriteDynamoDBRole",
                  "Arn"
                ]
              },
              "Layers": [
                {
                  "Ref": "AwssdkLambdaLayer"
                },
                {
                  "Ref": "MiddysdkLambdaLayer"
                }
              ]
            },
            "DependsOn": [
              "AddMenuItemLogGroup",
              "MenuTableWriteDynamoDBRole"
            ]
          },
          "BookATableLambdaVersion9MyjqD7eqpAz5txAW66W8eZIOKsaSFm47FbkqXl0r2U": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "BookATableLambdaFunction"
              },
              "CodeSha256": "Nwkgi3gh2I+hcim6HAHJ48UnYsHMp0K3/eGxWnGqa+k="
            }
          },
          "UpdateReservationLambdaVersionsZImiSjY87jbFs3QTBdvIuNldWCzYZeljRanm4MRNU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateReservationLambdaFunction"
              },
              "CodeSha256": "Nwkgi3gh2I+hcim6HAHJ48UnYsHMp0K3/eGxWnGqa+k="
            }
          },
          "GetAReservationLambdaVersionQHcyBveSomm3blpQG1AOindymJ0iNsyawgRLQVEtHs": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetAReservationLambdaFunction"
              },
              "CodeSha256": "Nwkgi3gh2I+hcim6HAHJ48UnYsHMp0K3/eGxWnGqa+k="
            }
          },
          "GetUsersReservationsLambdaVersionH7GFMwz5cpITNKKcZOfjmTt6SSr7bX4322dudx1vJY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetUsersReservationsLambdaFunction"
              },
              "CodeSha256": "Nwkgi3gh2I+hcim6HAHJ48UnYsHMp0K3/eGxWnGqa+k="
            }
          },
          "DoneWithAReservationLambdaVersion8zuAiT4T0u9tYo5SyH3hudQpEwIK92MgzX2IMOvHQ": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DoneWithAReservationLambdaFunction"
              },
              "CodeSha256": "Nwkgi3gh2I+hcim6HAHJ48UnYsHMp0K3/eGxWnGqa+k="
            }
          },
          "AddMenuItemLambdaVersionD4WVOWg0Ko5a9sJIpRFwXg9o8EaaI671Uw8RMc5ks": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AddMenuItemLambdaFunction"
              },
              "CodeSha256": "Nwkgi3gh2I+hcim6HAHJ48UnYsHMp0K3/eGxWnGqa+k="
            }
          },
          "HttpApi": {
            "Type": "AWS::ApiGatewayV2::Api",
            "Properties": {
              "Name": "dev-bistro-nord-backend",
              "ProtocolType": "HTTP"
            }
          },
          "HttpApiStage": {
            "Type": "AWS::ApiGatewayV2::Stage",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "StageName": "$default",
              "AutoDeploy": true,
              "DefaultRouteSettings": {
                "DetailedMetricsEnabled": false
              }
            }
          },
          "HttpApiAuthorizerJwtAuthorizer": {
            "Type": "AWS::ApiGatewayV2::Authorizer",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "Name": "JwtAuthorizer",
              "IdentitySource": [
                "$request.header.Authorization"
              ],
              "AuthorizerType": "JWT",
              "JwtConfiguration": {
                "Audience": [
                  {
                    "Ref": "CognitoUserPoolClient"
                  }
                ],
                "Issuer": {
                  "Fn::GetAtt": [
                    "CognitoUserPool",
                    "ProviderURL"
                  ]
                }
              }
            }
          },
          "BookATableLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "BookATableLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationBookATable": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "BookATableLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostBookatable": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /bookATable",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationBookATable"
                    }
                  ]
                ]
              },
              "AuthorizationType": "JWT",
              "AuthorizerId": {
                "Ref": "HttpApiAuthorizerJwtAuthorizer"
              },
              "AuthorizationScopes": [
                "ServerAccessScope/write"
              ]
            },
            "DependsOn": "HttpApiIntegrationBookATable"
          },
          "UpdateReservationLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateReservationLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationUpdateReservation": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "UpdateReservationLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePutUpdatereservationOrderidVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "PUT /UpdateReservation/{OrderId}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationUpdateReservation"
                    }
                  ]
                ]
              },
              "AuthorizationType": "JWT",
              "AuthorizerId": {
                "Ref": "HttpApiAuthorizerJwtAuthorizer"
              },
              "AuthorizationScopes": [
                "ServerAccessScope/write"
              ]
            },
            "DependsOn": "HttpApiIntegrationUpdateReservation"
          },
          "GetAReservationLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetAReservationLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetAReservation": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "GetAReservationLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetGetareservationOrderidVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /GetAReservation/{OrderId}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetAReservation"
                    }
                  ]
                ]
              },
              "AuthorizationType": "JWT",
              "AuthorizerId": {
                "Ref": "HttpApiAuthorizerJwtAuthorizer"
              },
              "AuthorizationScopes": [
                "ServerAccessScope/read"
              ]
            },
            "DependsOn": "HttpApiIntegrationGetAReservation"
          },
          "GetUsersReservationsLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetUsersReservationsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetUsersReservations": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "GetUsersReservationsLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetGetusersreservationsUseridVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /GetUsersReservations/{UserId}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetUsersReservations"
                    }
                  ]
                ]
              },
              "AuthorizationType": "JWT",
              "AuthorizerId": {
                "Ref": "HttpApiAuthorizerJwtAuthorizer"
              },
              "AuthorizationScopes": [
                "ServerAccessScope/read"
              ]
            },
            "DependsOn": "HttpApiIntegrationGetUsersReservations"
          },
          "DoneWithAReservationLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DoneWithAReservationLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationDoneWithAReservation": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "DoneWithAReservationLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostDonewithareservationOrderidVarStatusVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /DoneWithAReservation/{OrderId}/{Status}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationDoneWithAReservation"
                    }
                  ]
                ]
              },
              "AuthorizationType": "JWT",
              "AuthorizerId": {
                "Ref": "HttpApiAuthorizerJwtAuthorizer"
              },
              "AuthorizationScopes": [
                "ServerAccessScope/write"
              ]
            },
            "DependsOn": "HttpApiIntegrationDoneWithAReservation"
          },
          "AddMenuItemLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AddMenuItemLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationAddMenuItem": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "AddMenuItemLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostAddmenuitem": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /addMenuItem",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationAddMenuItem"
                    }
                  ]
                ]
              },
              "AuthorizationType": "JWT",
              "AuthorizerId": {
                "Ref": "HttpApiAuthorizerJwtAuthorizer"
              },
              "AuthorizationScopes": [
                "ServerAccessScope/write"
              ]
            },
            "DependsOn": "HttpApiIntegrationAddMenuItem"
          },
          "CognitoUserPool": {
            "Type": "AWS::Cognito::UserPool",
            "Properties": {
              "UserPoolName": "Bistro-Nord-UserPool",
              "UsernameAttributes": [
                "email"
              ],
              "AutoVerifiedAttributes": [
                "email"
              ],
              "UserPoolTags": {
                "git": "https://github.com/srinivas-pradhan/bistro-nord-backend",
                "app": "Bistro-Nord"
              }
            }
          },
          "CognitoUserPoolClient": {
            "Type": "AWS::Cognito::UserPoolClient",
            "Properties": {
              "ClientName": "Bistro-Nord-UserPool-client",
              "AccessTokenValidity": "<REDACTED>",
              "TokenValidityUnits": "<REDACTED>",
              "UserPoolId": {
                "Ref": "CognitoUserPool"
              },
              "GenerateSecret": "<REDACTED>",
              "ExplicitAuthFlows": [
                "ADMIN_NO_SRP_AUTH"
              ],
              "AllowedOAuthFlows": [
                "client_credentials"
              ],
              "AllowedOAuthFlowsUserPoolClient": true,
              "AllowedOAuthScopes": [
                "ServerAccessScope/read",
                "ServerAccessScope/write"
              ],
              "SupportedIdentityProviders": [
                "COGNITO"
              ],
              "CallbackURLs": [
                "https://example.com/signout"
              ]
            }
          },
          "UserPoolDomain": {
            "Type": "AWS::Cognito::UserPoolDomain",
            "Properties": {
              "UserPoolId": {
                "Ref": "CognitoUserPool"
              },
              "Domain": "bistro-nord-backend"
            }
          },
          "UserPoolResourceServer": {
            "Type": "AWS::Cognito::UserPoolResourceServer",
            "Properties": {
              "UserPoolId": {
                "Ref": "CognitoUserPool"
              },
              "Identifier": "ServerAccessScope",
              "Name": "ServerAccessScope",
              "Scopes": [
                {
                  "ScopeName": "read",
                  "ScopeDescription": "GET Calls SCOPE"
                },
                {
                  "ScopeName": "write",
                  "ScopeDescription": "POST PUT DELETE Calls SCOPE"
                }
              ]
            }
          },
          "BookATableDynamoDBTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "BookATable",
              "AttributeDefinitions": [
                {
                  "AttributeName": "BookingRef",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "BookingNumber",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "BookingRef",
                  "KeyType": "HASH"
                }
              ],
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 1,
                "WriteCapacityUnits": 1
              },
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "BookingNumber",
                  "KeySchema": [
                    {
                      "AttributeName": "BookingNumber",
                      "KeyType": "HASH"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  },
                  "ProvisionedThroughput": {
                    "ReadCapacityUnits": 1,
                    "WriteCapacityUnits": 1
                  }
                }
              ],
              "Tags": [
                {
                  "Key": "git",
                  "Value": "https://github.com/srinivas-pradhan/bistro-nord-backend"
                },
                {
                  "Key": "app",
                  "Value": "Bistro-Nord"
                }
              ]
            }
          },
          "DoneWithATableDynamoDBTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "DoneWithATable",
              "AttributeDefinitions": [
                {
                  "AttributeName": "BookingRef",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "BookingRef",
                  "KeyType": "HASH"
                }
              ],
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 1,
                "WriteCapacityUnits": 1
              },
              "Tags": [
                {
                  "Key": "git",
                  "Value": "https://github.com/srinivas-pradhan/bistro-nord-backend"
                },
                {
                  "Key": "app",
                  "Value": "Bistro-Nord"
                }
              ]
            }
          },
          "MenuTableDynamoDBTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "MenuTable",
              "AttributeDefinitions": [
                {
                  "AttributeName": "MenuItem",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "MenuItem",
                  "KeyType": "HASH"
                }
              ],
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 1,
                "WriteCapacityUnits": 1
              },
              "Tags": [
                {
                  "Key": "git",
                  "Value": "https://github.com/srinivas-pradhan/bistro-nord-backend"
                },
                {
                  "Key": "app",
                  "Value": "Bistro-Nord"
                }
              ]
            }
          },
          "WriteDynamoDBRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "Path": "/bistro-nord/bistro-nord-backend/lambda-role/",
              "RoleName": "WriteDynamoDBRole",
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": "sts:AssumeRole"
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": "CloudWatchLogPolicy",
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogGroup",
                          "logs:CreateLogStream",
                          "logs:PutLogEvents",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Join": [
                              ":",
                              [
                                "arn:aws:logs",
                                {
                                  "Ref": "AWS::Region"
                                },
                                {
                                  "Ref": "AWS::AccountId"
                                },
                                "log-group:/aws/lambda/*:*:*"
                              ]
                            ]
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "PolicyName": "WriteDynamoDBPolicy",
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "dynamodb:BatchGetItem",
                          "dynamodb:BatchWriteItem",
                          "dynamodb:ConditionCheckItem",
                          "dynamodb:PutItem",
                          "dynamodb:DescribeTable",
                          "dynamodb:DeleteItem",
                          "dynamodb:GetItem",
                          "dynamodb:Scan",
                          "dynamodb:Query",
                          "dynamodb:UpdateItem"
                        ],
                        "Resource": [
                          {
                            "Fn::Join": [
                              ":",
                              [
                                "arn:aws:dynamodb",
                                {
                                  "Ref": "AWS::Region"
                                },
                                {
                                  "Ref": "AWS::AccountId"
                                },
                                {
                                  "Fn::Join": [
                                    "/",
                                    [
                                      "table",
                                      {
                                        "Ref": "BookATableDynamoDBTable"
                                      }
                                    ]
                                  ]
                                }
                              ]
                            ]
                          },
                          {
                            "Fn::Join": [
                              ":",
                              [
                                "arn:aws:dynamodb",
                                {
                                  "Ref": "AWS::Region"
                                },
                                {
                                  "Ref": "AWS::AccountId"
                                },
                                {
                                  "Fn::Join": [
                                    "/",
                                    [
                                      "table",
                                      {
                                        "Ref": "BookATableDynamoDBTable"
                                      },
                                      "index",
                                      "*"
                                    ]
                                  ]
                                }
                              ]
                            ]
                          }
                        ]
                      }
                    ]
                  }
                }
              ]
            }
          },
          "ReadDynamoDBRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "Path": "/bistro-nord/bistro-nord-backend/lambda-role/",
              "RoleName": "ReadDynamoDBRole",
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": "sts:AssumeRole"
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": "CloudWatchLogPolicy",
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogGroup",
                          "logs:CreateLogStream",
                          "logs:PutLogEvents",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Join": [
                              ":",
                              [
                                "arn:aws:logs",
                                {
                                  "Ref": "AWS::Region"
                                },
                                {
                                  "Ref": "AWS::AccountId"
                                },
                                "log-group:/aws/lambda/*:*:*"
                              ]
                            ]
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "PolicyName": "ReadDynamoDBPolicy",
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "dynamodb:BatchGetItem",
                          "dynamodb:ConditionCheckItem",
                          "dynamodb:DescribeTable",
                          "dynamodb:GetItem",
                          "dynamodb:Scan",
                          "dynamodb:Query"
                        ],
                        "Resource": [
                          {
                            "Fn::Join": [
                              ":",
                              [
                                "arn:aws:dynamodb",
                                {
                                  "Ref": "AWS::Region"
                                },
                                {
                                  "Ref": "AWS::AccountId"
                                },
                                {
                                  "Fn::Join": [
                                    "/",
                                    [
                                      "table",
                                      {
                                        "Ref": "BookATableDynamoDBTable"
                                      }
                                    ]
                                  ]
                                }
                              ]
                            ]
                          },
                          {
                            "Fn::Join": [
                              ":",
                              [
                                "arn:aws:dynamodb",
                                {
                                  "Ref": "AWS::Region"
                                },
                                {
                                  "Ref": "AWS::AccountId"
                                },
                                {
                                  "Fn::Join": [
                                    "/",
                                    [
                                      "table",
                                      {
                                        "Ref": "BookATableDynamoDBTable"
                                      },
                                      "index",
                                      "*"
                                    ]
                                  ]
                                }
                              ]
                            ]
                          }
                        ]
                      }
                    ]
                  }
                }
              ]
            }
          },
          "DoneWithATableRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "Path": "/bistro-nord/bistro-nord-backend/lambda-role/",
              "RoleName": "DoneWithATableRole",
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": "sts:AssumeRole"
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": "CloudWatchLogPolicy",
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogGroup",
                          "logs:CreateLogStream",
                          "logs:PutLogEvents",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Join": [
                              ":",
                              [
                                "arn:aws:logs",
                                {
                                  "Ref": "AWS::Region"
                                },
                                {
                                  "Ref": "AWS::AccountId"
                                },
                                "log-group:/aws/lambda/*:*:*"
                              ]
                            ]
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "PolicyName": "DoneWithATableReadPolicy",
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "dynamodb:BatchGetItem",
                          "dynamodb:ConditionCheckItem",
                          "dynamodb:DescribeTable",
                          "dynamodb:GetItem",
                          "dynamodb:Scan",
                          "dynamodb:Query",
                          "dynamodb:DeleteItem"
                        ],
                        "Resource": [
                          {
                            "Fn::Join": [
                              ":",
                              [
                                "arn:aws:dynamodb",
                                {
                                  "Ref": "AWS::Region"
                                },
                                {
                                  "Ref": "AWS::AccountId"
                                },
                                {
                                  "Fn::Join": [
                                    "/",
                                    [
                                      "table",
                                      {
                                        "Ref": "BookATableDynamoDBTable"
                                      }
                                    ]
                                  ]
                                }
                              ]
                            ]
                          },
                          {
                            "Fn::Join": [
                              ":",
                              [
                                "arn:aws:dynamodb",
                                {
                                  "Ref": "AWS::Region"
                                },
                                {
                                  "Ref": "AWS::AccountId"
                                },
                                {
                                  "Fn::Join": [
                                    "/",
                                    [
                                      "table",
                                      {
                                        "Ref": "BookATableDynamoDBTable"
                                      },
                                      "index",
                                      "*"
                                    ]
                                  ]
                                }
                              ]
                            ]
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "PolicyName": "DoneWithATableWritePolicy",
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "dynamodb:BatchGetItem",
                          "dynamodb:BatchWriteItem",
                          "dynamodb:ConditionCheckItem",
                          "dynamodb:PutItem",
                          "dynamodb:DescribeTable",
                          "dynamodb:DeleteItem",
                          "dynamodb:GetItem",
                          "dynamodb:Scan",
                          "dynamodb:Query",
                          "dynamodb:UpdateItem"
                        ],
                        "Resource": [
                          {
                            "Fn::Join": [
                              ":",
                              [
                                "arn:aws:dynamodb",
                                {
                                  "Ref": "AWS::Region"
                                },
                                {
                                  "Ref": "AWS::AccountId"
                                },
                                {
                                  "Fn::Join": [
                                    "/",
                                    [
                                      "table",
                                      {
                                        "Ref": "DoneWithATableDynamoDBTable"
                                      }
                                    ]
                                  ]
                                }
                              ]
                            ]
                          }
                        ]
                      }
                    ]
                  }
                }
              ]
            }
          },
          "MenuTableWriteDynamoDBRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "Path": "/bistro-nord/bistro-nord-backend/lambda-role/",
              "RoleName": "MenuTableWriteRole",
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": "sts:AssumeRole"
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": "CloudWatchLogPolicy",
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogGroup",
                          "logs:CreateLogStream",
                          "logs:PutLogEvents",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Join": [
                              ":",
                              [
                                "arn:aws:logs",
                                {
                                  "Ref": "AWS::Region"
                                },
                                {
                                  "Ref": "AWS::AccountId"
                                },
                                "log-group:/aws/lambda/*:*:*"
                              ]
                            ]
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "PolicyName": "MenuTableWritePolicy",
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "dynamodb:BatchGetItem",
                          "dynamodb:BatchWriteItem",
                          "dynamodb:ConditionCheckItem",
                          "dynamodb:PutItem",
                          "dynamodb:DescribeTable",
                          "dynamodb:DeleteItem",
                          "dynamodb:GetItem",
                          "dynamodb:Scan",
                          "dynamodb:Query",
                          "dynamodb:UpdateItem"
                        ],
                        "Resource": [
                          {
                            "Fn::Join": [
                              ":",
                              [
                                "arn:aws:dynamodb",
                                {
                                  "Ref": "AWS::Region"
                                },
                                {
                                  "Ref": "AWS::AccountId"
                                },
                                {
                                  "Fn::Join": [
                                    "/",
                                    [
                                      "table",
                                      {
                                        "Ref": "MenuTableDynamoDBTable"
                                      }
                                    ]
                                  ]
                                }
                              ]
                            ]
                          },
                          {
                            "Fn::Join": [
                              ":",
                              [
                                "arn:aws:dynamodb",
                                {
                                  "Ref": "AWS::Region"
                                },
                                {
                                  "Ref": "AWS::AccountId"
                                },
                                {
                                  "Fn::Join": [
                                    "/",
                                    [
                                      "table",
                                      {
                                        "Ref": "BookATableDynamoDBTable"
                                      },
                                      "index",
                                      "*"
                                    ]
                                  ]
                                }
                              ]
                            ]
                          }
                        ]
                      }
                    ]
                  }
                }
              ]
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "Export": {
              "Name": "sls-bistro-nord-backend-dev-ServerlessDeploymentBucketName"
            }
          },
          "MiddysdkLambdaLayerQualifiedArn": {
            "Description": "Current Lambda layer version",
            "Value": {
              "Ref": "MiddysdkLambdaLayer"
            },
            "Export": {
              "Name": "sls-bistro-nord-backend-dev-MiddysdkLambdaLayerQualifiedArn"
            }
          },
          "MiddysdkLambdaLayerHash": {
            "Description": "Current Lambda layer hash",
            "Value": "278e11f3ca238f3b8899bc14ee07271007e7a2fd",
            "Export": {
              "Name": "sls-bistro-nord-backend-dev-MiddysdkLambdaLayerHash"
            }
          },
          "MiddysdkLambdaLayerS3Key": {
            "Description": "Current Lambda layer S3Key",
            "Value": "serverless/bistro-nord-backend/dev/1738320153999-2025-01-31T10:42:33.999Z/middysdk.zip",
            "Export": {
              "Name": "sls-bistro-nord-backend-dev-MiddysdkLambdaLayerS3Key"
            }
          },
          "AwssdkLambdaLayerQualifiedArn": {
            "Description": "Current Lambda layer version",
            "Value": {
              "Ref": "AwssdkLambdaLayer"
            },
            "Export": {
              "Name": "sls-bistro-nord-backend-dev-AwssdkLambdaLayerQualifiedArn"
            }
          },
          "AwssdkLambdaLayerHash": {
            "Description": "Current Lambda layer hash",
            "Value": "25154eaadc14896f6c19db4d852b5887d5212463",
            "Export": {
              "Name": "sls-bistro-nord-backend-dev-AwssdkLambdaLayerHash"
            }
          },
          "AwssdkLambdaLayerS3Key": {
            "Description": "Current Lambda layer S3Key",
            "Value": "serverless/bistro-nord-backend/dev/1738324788715-2025-01-31T11:59:48.715Z/awssdk.zip",
            "Export": {
              "Name": "sls-bistro-nord-backend-dev-AwssdkLambdaLayerS3Key"
            }
          },
          "BookATableLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "BookATableLambdaVersion9MyjqD7eqpAz5txAW66W8eZIOKsaSFm47FbkqXl0r2U"
            },
            "Export": {
              "Name": "sls-bistro-nord-backend-dev-BookATableLambdaFunctionQualifiedArn"
            }
          },
          "UpdateReservationLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateReservationLambdaVersionsZImiSjY87jbFs3QTBdvIuNldWCzYZeljRanm4MRNU"
            },
            "Export": {
              "Name": "sls-bistro-nord-backend-dev-UpdateReservationLambdaFunctionQualifiedArn"
            }
          },
          "GetAReservationLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetAReservationLambdaVersionQHcyBveSomm3blpQG1AOindymJ0iNsyawgRLQVEtHs"
            },
            "Export": {
              "Name": "sls-bistro-nord-backend-dev-GetAReservationLambdaFunctionQualifiedArn"
            }
          },
          "GetUsersReservationsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetUsersReservationsLambdaVersionH7GFMwz5cpITNKKcZOfjmTt6SSr7bX4322dudx1vJY"
            },
            "Export": {
              "Name": "sls-bistro-nord-backend-dev-GetUsersReservationsLambdaFunctionQualifiedArn"
            }
          },
          "DoneWithAReservationLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DoneWithAReservationLambdaVersion8zuAiT4T0u9tYo5SyH3hudQpEwIK92MgzX2IMOvHQ"
            },
            "Export": {
              "Name": "sls-bistro-nord-backend-dev-DoneWithAReservationLambdaFunctionQualifiedArn"
            }
          },
          "AddMenuItemLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AddMenuItemLambdaVersionD4WVOWg0Ko5a9sJIpRFwXg9o8EaaI671Uw8RMc5ks"
            },
            "Export": {
              "Name": "sls-bistro-nord-backend-dev-AddMenuItemLambdaFunctionQualifiedArn"
            }
          },
          "HttpApiId": {
            "Description": "Id of the HTTP API",
            "Value": {
              "Ref": "HttpApi"
            },
            "Export": {
              "Name": "sls-bistro-nord-backend-dev-HttpApiId"
            }
          },
          "HttpApiUrl": {
            "Description": "URL of the HTTP API",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "HttpApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  }
                ]
              ]
            },
            "Export": {
              "Name": "sls-bistro-nord-backend-dev-HttpApiUrl"
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "dashboard": {
      "isEnabledForService": false,
      "requiredAuthentication": false,
      "orgFeaturesInUse": null,
      "orgObservabilityIntegrations": null,
      "serviceAppId": null,
      "serviceProvider": null,
      "instanceParameters": null
    },
    "serviceRawFile": "# \"org\" ensures this Service is used with the correct Serverless Framework Access Key.\norg: srinivaspradhan\n# \"service\" is the name of this project. This will also be added to your AWS resource names.\nservice: bistro-nord-backend\n\nprovider:\n  name: aws\n  runtime: nodejs20.x\n  httpApi:\n    authorizers:\n      JwtAuthorizer:\n        type: jwt\n        identitySource: $request.header.Authorization\n        issuerUrl: !GetAtt CognitoUserPool.ProviderURL\n        audience:\n          - Ref: CognitoUserPoolClient\n\npackage:\n  patterns:\n    - '!package.zip'\n\nlayers:\n  awssdk:\n    path: aws-sdk-layer\n    description: SDK Layer for AWS Node Package.\n  middysdk:\n    path: middy-layer\n    description: Middy Layer for JS Middleware Setup.\n\nfunctions:\n  - ${file(lambda/resources.yml)}\n\nresources:\n  - ${file(cognito/resources.yml)}\n  - ${file(dynamodb/resources.yml)}\n  - ${file(iam/resources.yml)}\n",
    "command": [
      "deploy"
    ],
    "options": {},
    "orgId": "371f691c-208e-40de-91ef-ed8aef83b89a",
    "orgName": "srinivaspradhan",
    "userId": "VtCrd1nLwWx73tDxJX",
    "userName": "srinivaspradhan",
    "serviceProviderAwsAccountId": "703866956858",
    "serviceProviderAwsCfStackName": "bistro-nord-backend-dev",
    "serviceProviderAwsCfStackId": "arn:aws:cloudformation:us-east-1:703866956858:stack/bistro-nord-backend-dev/f8179900-b3c5-11ef-b332-12d09227460d",
    "serviceProviderAwsCfStackCreated": "2024-12-06T11:33:52.519Z",
    "serviceProviderAwsCfStackUpdated": "2025-02-06T02:34:11.903Z",
    "serviceProviderAwsCfStackStatus": "UPDATE_COMPLETE",
    "serviceProviderAwsCfStackOutputs": [
      {
        "OutputKey": "GetAReservationLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:703866956858:function:bistro-nord-backend-dev-GetAReservation:124",
        "Description": "Current Lambda function version",
        "ExportName": "sls-bistro-nord-backend-dev-GetAReservationLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "MiddysdkLambdaLayerHash",
        "OutputValue": "278e11f3ca238f3b8899bc14ee07271007e7a2fd",
        "Description": "Current Lambda layer hash",
        "ExportName": "sls-bistro-nord-backend-dev-MiddysdkLambdaLayerHash"
      },
      {
        "OutputKey": "AddMenuItemLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:703866956858:function:bistro-nord-backend-dev-addMenuItem:13",
        "Description": "Current Lambda function version",
        "ExportName": "sls-bistro-nord-backend-dev-AddMenuItemLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "MiddysdkLambdaLayerS3Key",
        "OutputValue": "serverless/bistro-nord-backend/dev/1738320153999-2025-01-31T10:42:33.999Z/middysdk.zip",
        "Description": "Current Lambda layer S3Key",
        "ExportName": "sls-bistro-nord-backend-dev-MiddysdkLambdaLayerS3Key"
      },
      {
        "OutputKey": "MiddysdkLambdaLayerQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:703866956858:layer:middysdk:43",
        "Description": "Current Lambda layer version",
        "ExportName": "sls-bistro-nord-backend-dev-MiddysdkLambdaLayerQualifiedArn"
      },
      {
        "OutputKey": "AwssdkLambdaLayerQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:703866956858:layer:awssdk:64",
        "Description": "Current Lambda layer version",
        "ExportName": "sls-bistro-nord-backend-dev-AwssdkLambdaLayerQualifiedArn"
      },
      {
        "OutputKey": "UpdateReservationLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:703866956858:function:bistro-nord-backend-dev-UpdateReservation:211",
        "Description": "Current Lambda function version",
        "ExportName": "sls-bistro-nord-backend-dev-UpdateReservationLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "DoneWithAReservationLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:703866956858:function:bistro-nord-backend-dev-DoneWithAReservation:71",
        "Description": "Current Lambda function version",
        "ExportName": "sls-bistro-nord-backend-dev-DoneWithAReservationLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "HttpApiId",
        "OutputValue": "enr8szp4y4",
        "Description": "Id of the HTTP API",
        "ExportName": "sls-bistro-nord-backend-dev-HttpApiId"
      },
      {
        "OutputKey": "ServerlessDeploymentBucketName",
        "OutputValue": "bistro-nord-backend-dev-serverlessdeploymentbucket-jdnnglfveqsl",
        "ExportName": "sls-bistro-nord-backend-dev-ServerlessDeploymentBucketName"
      },
      {
        "OutputKey": "HttpApiUrl",
        "OutputValue": "https://enr8szp4y4.execute-api.us-east-1.amazonaws.com",
        "Description": "URL of the HTTP API",
        "ExportName": "sls-bistro-nord-backend-dev-HttpApiUrl"
      },
      {
        "OutputKey": "AwssdkLambdaLayerHash",
        "OutputValue": "25154eaadc14896f6c19db4d852b5887d5212463",
        "Description": "Current Lambda layer hash",
        "ExportName": "sls-bistro-nord-backend-dev-AwssdkLambdaLayerHash"
      },
      {
        "OutputKey": "BookATableLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:703866956858:function:bistro-nord-backend-dev-bookATable:438",
        "Description": "Current Lambda function version",
        "ExportName": "sls-bistro-nord-backend-dev-BookATableLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetUsersReservationsLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:703866956858:function:bistro-nord-backend-dev-GetUsersReservations:105",
        "Description": "Current Lambda function version",
        "ExportName": "sls-bistro-nord-backend-dev-GetUsersReservationsLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "AwssdkLambdaLayerS3Key",
        "OutputValue": "serverless/bistro-nord-backend/dev/1738324788715-2025-01-31T11:59:48.715Z/awssdk.zip",
        "Description": "Current Lambda layer S3Key",
        "ExportName": "sls-bistro-nord-backend-dev-AwssdkLambdaLayerS3Key"
      }
    ],
    "compiledCloudFormationTemplate": {
      "AWSTemplateFormatVersion": "2010-09-09",
      "Description": "The AWS CloudFormation template for this Serverless application",
      "Resources": {
        "ServerlessDeploymentBucket": {
          "Type": "AWS::S3::Bucket",
          "Properties": {
            "BucketEncryption": {
              "ServerSideEncryptionConfiguration": [
                {
                  "ServerSideEncryptionByDefault": {
                    "SSEAlgorithm": "AES256"
                  }
                }
              ]
            }
          }
        },
        "ServerlessDeploymentBucketPolicy": {
          "Type": "AWS::S3::BucketPolicy",
          "Properties": {
            "Bucket": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": "s3:*",
                  "Effect": "Deny",
                  "Principal": "*",
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:",
                          {
                            "Ref": "AWS::Partition"
                          },
                          ":s3:::",
                          {
                            "Ref": "ServerlessDeploymentBucket"
                          },
                          "/*"
                        ]
                      ]
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:",
                          {
                            "Ref": "AWS::Partition"
                          },
                          ":s3:::",
                          {
                            "Ref": "ServerlessDeploymentBucket"
                          }
                        ]
                      ]
                    }
                  ],
                  "Condition": {
                    "Bool": {
                      "aws:SecureTransport": false
                    }
                  }
                }
              ]
            }
          }
        },
        "BookATableLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/bistro-nord-backend-dev-bookATable"
          }
        },
        "UpdateReservationLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/bistro-nord-backend-dev-UpdateReservation"
          }
        },
        "GetAReservationLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/bistro-nord-backend-dev-GetAReservation"
          }
        },
        "GetUsersReservationsLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/bistro-nord-backend-dev-GetUsersReservations"
          }
        },
        "DoneWithAReservationLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/bistro-nord-backend-dev-DoneWithAReservation"
          }
        },
        "AddMenuItemLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/bistro-nord-backend-dev-addMenuItem"
          }
        },
        "MiddysdkLambdaLayer": {
          "Type": "AWS::Lambda::LayerVersion",
          "Properties": {
            "Content": {
              "S3Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "S3Key": "serverless/bistro-nord-backend/dev/1738320153999-2025-01-31T10:42:33.999Z/middysdk.zip"
            },
            "LayerName": "middysdk",
            "Description": "Middy Layer for JS Middleware Setup."
          }
        },
        "AwssdkLambdaLayer": {
          "Type": "AWS::Lambda::LayerVersion",
          "Properties": {
            "Content": {
              "S3Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "S3Key": "serverless/bistro-nord-backend/dev/1738324788715-2025-01-31T11:59:48.715Z/awssdk.zip"
            },
            "LayerName": "awssdk",
            "Description": "SDK Layer for AWS Node Package."
          }
        },
        "BookATableLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "S3Key": "serverless/bistro-nord-backend/dev/1738810062460-2025-02-06T02:47:42.460Z/bistro-nord-backend.zip"
            },
            "Handler": "src/bookATable/handler.TableBookHandler",
            "Runtime": "nodejs20.x",
            "FunctionName": "bistro-nord-backend-dev-bookATable",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "TABLE_NAME": "BookATable"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "WriteDynamoDBRole",
                "Arn"
              ]
            },
            "Layers": [
              {
                "Ref": "AwssdkLambdaLayer"
              },
              {
                "Ref": "MiddysdkLambdaLayer"
              }
            ]
          },
          "DependsOn": [
            "BookATableLogGroup",
            "WriteDynamoDBRole"
          ]
        },
        "UpdateReservationLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "S3Key": "serverless/bistro-nord-backend/dev/1738810062460-2025-02-06T02:47:42.460Z/bistro-nord-backend.zip"
            },
            "Handler": "src/UpdateReservation/handler.UpdateReservationHandler",
            "Runtime": "nodejs20.x",
            "FunctionName": "bistro-nord-backend-dev-UpdateReservation",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "TABLE_NAME": "BookATable",
                "BOOKING_NUMBER": "BookingNumber",
                "BOOKING_REF": "BookingRef"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "WriteDynamoDBRole",
                "Arn"
              ]
            },
            "Layers": [
              {
                "Ref": "AwssdkLambdaLayer"
              },
              {
                "Ref": "MiddysdkLambdaLayer"
              }
            ]
          },
          "DependsOn": [
            "UpdateReservationLogGroup",
            "WriteDynamoDBRole"
          ]
        },
        "GetAReservationLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "S3Key": "serverless/bistro-nord-backend/dev/1738810062460-2025-02-06T02:47:42.460Z/bistro-nord-backend.zip"
            },
            "Handler": "src/GetAReservation/handler.GetAReservationHandler",
            "Runtime": "nodejs20.x",
            "FunctionName": "bistro-nord-backend-dev-GetAReservation",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "TABLE_NAME": "BookATable",
                "BOOKING_NUMBER": "BookingNumber"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "ReadDynamoDBRole",
                "Arn"
              ]
            },
            "Layers": [
              {
                "Ref": "AwssdkLambdaLayer"
              },
              {
                "Ref": "MiddysdkLambdaLayer"
              }
            ]
          },
          "DependsOn": [
            "GetAReservationLogGroup",
            "ReadDynamoDBRole"
          ]
        },
        "GetUsersReservationsLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "S3Key": "serverless/bistro-nord-backend/dev/1738810062460-2025-02-06T02:47:42.460Z/bistro-nord-backend.zip"
            },
            "Handler": "src/GetUsersReservations/handler.GetUsersReservationsHandler",
            "Runtime": "nodejs20.x",
            "FunctionName": "bistro-nord-backend-dev-GetUsersReservations",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "TABLE_NAME": "BookATable"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "ReadDynamoDBRole",
                "Arn"
              ]
            },
            "Layers": [
              {
                "Ref": "AwssdkLambdaLayer"
              },
              {
                "Ref": "MiddysdkLambdaLayer"
              }
            ]
          },
          "DependsOn": [
            "GetUsersReservationsLogGroup",
            "ReadDynamoDBRole"
          ]
        },
        "DoneWithAReservationLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "S3Key": "serverless/bistro-nord-backend/dev/1738810062460-2025-02-06T02:47:42.460Z/bistro-nord-backend.zip"
            },
            "Handler": "src/DoneWithAReservation/handler.DoneWithAReservationHandler",
            "Runtime": "nodejs20.x",
            "FunctionName": "bistro-nord-backend-dev-DoneWithAReservation",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "TABLE_NAME": "BookATable",
                "DONE_TABLE_NAME": "DoneWithATable",
                "BOOKING_NUMBER": "BookingNumber"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "DoneWithATableRole",
                "Arn"
              ]
            },
            "Layers": [
              {
                "Ref": "AwssdkLambdaLayer"
              },
              {
                "Ref": "MiddysdkLambdaLayer"
              }
            ]
          },
          "DependsOn": [
            "DoneWithAReservationLogGroup",
            "DoneWithATableRole"
          ]
        },
        "AddMenuItemLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "S3Key": "serverless/bistro-nord-backend/dev/1738810062460-2025-02-06T02:47:42.460Z/bistro-nord-backend.zip"
            },
            "Handler": "src/addMenuItem/handler.addMenuItemHandler",
            "Runtime": "nodejs20.x",
            "FunctionName": "bistro-nord-backend-dev-addMenuItem",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "TABLE_NAME": "MenuTable"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "MenuTableWriteDynamoDBRole",
                "Arn"
              ]
            },
            "Layers": [
              {
                "Ref": "AwssdkLambdaLayer"
              },
              {
                "Ref": "MiddysdkLambdaLayer"
              }
            ]
          },
          "DependsOn": [
            "AddMenuItemLogGroup",
            "MenuTableWriteDynamoDBRole"
          ]
        },
        "BookATableLambdaVersion9MyjqD7eqpAz5txAW66W8eZIOKsaSFm47FbkqXl0r2U": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "BookATableLambdaFunction"
            },
            "CodeSha256": "Nwkgi3gh2I+hcim6HAHJ48UnYsHMp0K3/eGxWnGqa+k="
          }
        },
        "UpdateReservationLambdaVersionsZImiSjY87jbFs3QTBdvIuNldWCzYZeljRanm4MRNU": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "UpdateReservationLambdaFunction"
            },
            "CodeSha256": "Nwkgi3gh2I+hcim6HAHJ48UnYsHMp0K3/eGxWnGqa+k="
          }
        },
        "GetAReservationLambdaVersionQHcyBveSomm3blpQG1AOindymJ0iNsyawgRLQVEtHs": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "GetAReservationLambdaFunction"
            },
            "CodeSha256": "Nwkgi3gh2I+hcim6HAHJ48UnYsHMp0K3/eGxWnGqa+k="
          }
        },
        "GetUsersReservationsLambdaVersionH7GFMwz5cpITNKKcZOfjmTt6SSr7bX4322dudx1vJY": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "GetUsersReservationsLambdaFunction"
            },
            "CodeSha256": "Nwkgi3gh2I+hcim6HAHJ48UnYsHMp0K3/eGxWnGqa+k="
          }
        },
        "DoneWithAReservationLambdaVersion8zuAiT4T0u9tYo5SyH3hudQpEwIK92MgzX2IMOvHQ": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "DoneWithAReservationLambdaFunction"
            },
            "CodeSha256": "Nwkgi3gh2I+hcim6HAHJ48UnYsHMp0K3/eGxWnGqa+k="
          }
        },
        "AddMenuItemLambdaVersionD4WVOWg0Ko5a9sJIpRFwXg9o8EaaI671Uw8RMc5ks": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "AddMenuItemLambdaFunction"
            },
            "CodeSha256": "Nwkgi3gh2I+hcim6HAHJ48UnYsHMp0K3/eGxWnGqa+k="
          }
        },
        "HttpApi": {
          "Type": "AWS::ApiGatewayV2::Api",
          "Properties": {
            "Name": "dev-bistro-nord-backend",
            "ProtocolType": "HTTP"
          }
        },
        "HttpApiStage": {
          "Type": "AWS::ApiGatewayV2::Stage",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "StageName": "$default",
            "AutoDeploy": true,
            "DefaultRouteSettings": {
              "DetailedMetricsEnabled": false
            }
          }
        },
        "HttpApiAuthorizerJwtAuthorizer": {
          "Type": "AWS::ApiGatewayV2::Authorizer",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "Name": "JwtAuthorizer",
            "IdentitySource": [
              "$request.header.Authorization"
            ],
            "AuthorizerType": "JWT",
            "JwtConfiguration": {
              "Audience": [
                {
                  "Ref": "CognitoUserPoolClient"
                }
              ],
              "Issuer": {
                "Fn::GetAtt": [
                  "CognitoUserPool",
                  "ProviderURL"
                ]
              }
            }
          }
        },
        "BookATableLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "BookATableLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationBookATable": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "BookATableLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRoutePostBookatable": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "POST /bookATable",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationBookATable"
                  }
                ]
              ]
            },
            "AuthorizationType": "JWT",
            "AuthorizerId": {
              "Ref": "HttpApiAuthorizerJwtAuthorizer"
            },
            "AuthorizationScopes": [
              "ServerAccessScope/write"
            ]
          },
          "DependsOn": "HttpApiIntegrationBookATable"
        },
        "UpdateReservationLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "UpdateReservationLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationUpdateReservation": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "UpdateReservationLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRoutePutUpdatereservationOrderidVar": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "PUT /UpdateReservation/{OrderId}",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationUpdateReservation"
                  }
                ]
              ]
            },
            "AuthorizationType": "JWT",
            "AuthorizerId": {
              "Ref": "HttpApiAuthorizerJwtAuthorizer"
            },
            "AuthorizationScopes": [
              "ServerAccessScope/write"
            ]
          },
          "DependsOn": "HttpApiIntegrationUpdateReservation"
        },
        "GetAReservationLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "GetAReservationLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationGetAReservation": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "GetAReservationLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRouteGetGetareservationOrderidVar": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "GET /GetAReservation/{OrderId}",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationGetAReservation"
                  }
                ]
              ]
            },
            "AuthorizationType": "JWT",
            "AuthorizerId": {
              "Ref": "HttpApiAuthorizerJwtAuthorizer"
            },
            "AuthorizationScopes": [
              "ServerAccessScope/read"
            ]
          },
          "DependsOn": "HttpApiIntegrationGetAReservation"
        },
        "GetUsersReservationsLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "GetUsersReservationsLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationGetUsersReservations": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "GetUsersReservationsLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRouteGetGetusersreservationsUseridVar": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "GET /GetUsersReservations/{UserId}",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationGetUsersReservations"
                  }
                ]
              ]
            },
            "AuthorizationType": "JWT",
            "AuthorizerId": {
              "Ref": "HttpApiAuthorizerJwtAuthorizer"
            },
            "AuthorizationScopes": [
              "ServerAccessScope/read"
            ]
          },
          "DependsOn": "HttpApiIntegrationGetUsersReservations"
        },
        "DoneWithAReservationLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "DoneWithAReservationLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationDoneWithAReservation": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "DoneWithAReservationLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRoutePostDonewithareservationOrderidVarStatusVar": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "POST /DoneWithAReservation/{OrderId}/{Status}",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationDoneWithAReservation"
                  }
                ]
              ]
            },
            "AuthorizationType": "JWT",
            "AuthorizerId": {
              "Ref": "HttpApiAuthorizerJwtAuthorizer"
            },
            "AuthorizationScopes": [
              "ServerAccessScope/write"
            ]
          },
          "DependsOn": "HttpApiIntegrationDoneWithAReservation"
        },
        "AddMenuItemLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "AddMenuItemLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationAddMenuItem": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "AddMenuItemLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRoutePostAddmenuitem": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "POST /addMenuItem",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationAddMenuItem"
                  }
                ]
              ]
            },
            "AuthorizationType": "JWT",
            "AuthorizerId": {
              "Ref": "HttpApiAuthorizerJwtAuthorizer"
            },
            "AuthorizationScopes": [
              "ServerAccessScope/write"
            ]
          },
          "DependsOn": "HttpApiIntegrationAddMenuItem"
        },
        "CognitoUserPool": {
          "Type": "AWS::Cognito::UserPool",
          "Properties": {
            "UserPoolName": "Bistro-Nord-UserPool",
            "UsernameAttributes": [
              "email"
            ],
            "AutoVerifiedAttributes": [
              "email"
            ],
            "UserPoolTags": {
              "git": "https://github.com/srinivas-pradhan/bistro-nord-backend",
              "app": "Bistro-Nord"
            }
          }
        },
        "CognitoUserPoolClient": {
          "Type": "AWS::Cognito::UserPoolClient",
          "Properties": {
            "ClientName": "Bistro-Nord-UserPool-client",
            "AccessTokenValidity": "<REDACTED>",
            "TokenValidityUnits": "<REDACTED>",
            "UserPoolId": {
              "Ref": "CognitoUserPool"
            },
            "GenerateSecret": "<REDACTED>",
            "ExplicitAuthFlows": [
              "ADMIN_NO_SRP_AUTH"
            ],
            "AllowedOAuthFlows": [
              "client_credentials"
            ],
            "AllowedOAuthFlowsUserPoolClient": true,
            "AllowedOAuthScopes": [
              "ServerAccessScope/read",
              "ServerAccessScope/write"
            ],
            "SupportedIdentityProviders": [
              "COGNITO"
            ],
            "CallbackURLs": [
              "https://example.com/signout"
            ]
          }
        },
        "UserPoolDomain": {
          "Type": "AWS::Cognito::UserPoolDomain",
          "Properties": {
            "UserPoolId": {
              "Ref": "CognitoUserPool"
            },
            "Domain": "bistro-nord-backend"
          }
        },
        "UserPoolResourceServer": {
          "Type": "AWS::Cognito::UserPoolResourceServer",
          "Properties": {
            "UserPoolId": {
              "Ref": "CognitoUserPool"
            },
            "Identifier": "ServerAccessScope",
            "Name": "ServerAccessScope",
            "Scopes": [
              {
                "ScopeName": "read",
                "ScopeDescription": "GET Calls SCOPE"
              },
              {
                "ScopeName": "write",
                "ScopeDescription": "POST PUT DELETE Calls SCOPE"
              }
            ]
          }
        },
        "BookATableDynamoDBTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "BookATable",
            "AttributeDefinitions": [
              {
                "AttributeName": "BookingRef",
                "AttributeType": "S"
              },
              {
                "AttributeName": "BookingNumber",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "BookingRef",
                "KeyType": "HASH"
              }
            ],
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 1,
              "WriteCapacityUnits": 1
            },
            "GlobalSecondaryIndexes": [
              {
                "IndexName": "BookingNumber",
                "KeySchema": [
                  {
                    "AttributeName": "BookingNumber",
                    "KeyType": "HASH"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                },
                "ProvisionedThroughput": {
                  "ReadCapacityUnits": 1,
                  "WriteCapacityUnits": 1
                }
              }
            ],
            "Tags": [
              {
                "Key": "git",
                "Value": "https://github.com/srinivas-pradhan/bistro-nord-backend"
              },
              {
                "Key": "app",
                "Value": "Bistro-Nord"
              }
            ]
          }
        },
        "DoneWithATableDynamoDBTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "DoneWithATable",
            "AttributeDefinitions": [
              {
                "AttributeName": "BookingRef",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "BookingRef",
                "KeyType": "HASH"
              }
            ],
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 1,
              "WriteCapacityUnits": 1
            },
            "Tags": [
              {
                "Key": "git",
                "Value": "https://github.com/srinivas-pradhan/bistro-nord-backend"
              },
              {
                "Key": "app",
                "Value": "Bistro-Nord"
              }
            ]
          }
        },
        "MenuTableDynamoDBTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "MenuTable",
            "AttributeDefinitions": [
              {
                "AttributeName": "MenuItem",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "MenuItem",
                "KeyType": "HASH"
              }
            ],
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 1,
              "WriteCapacityUnits": 1
            },
            "Tags": [
              {
                "Key": "git",
                "Value": "https://github.com/srinivas-pradhan/bistro-nord-backend"
              },
              {
                "Key": "app",
                "Value": "Bistro-Nord"
              }
            ]
          }
        },
        "WriteDynamoDBRole": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "Path": "/bistro-nord/bistro-nord-backend/lambda-role/",
            "RoleName": "WriteDynamoDBRole",
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": [
                      "lambda.amazonaws.com"
                    ]
                  },
                  "Action": "sts:AssumeRole"
                }
              ]
            },
            "Policies": [
              {
                "PolicyName": "CloudWatchLogPolicy",
                "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "logs:CreateLogGroup",
                        "logs:CreateLogStream",
                        "logs:PutLogEvents",
                        "logs:TagResource"
                      ],
                      "Resource": [
                        {
                          "Fn::Join": [
                            ":",
                            [
                              "arn:aws:logs",
                              {
                                "Ref": "AWS::Region"
                              },
                              {
                                "Ref": "AWS::AccountId"
                              },
                              "log-group:/aws/lambda/*:*:*"
                            ]
                          ]
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "PolicyName": "WriteDynamoDBPolicy",
                "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "dynamodb:BatchGetItem",
                        "dynamodb:BatchWriteItem",
                        "dynamodb:ConditionCheckItem",
                        "dynamodb:PutItem",
                        "dynamodb:DescribeTable",
                        "dynamodb:DeleteItem",
                        "dynamodb:GetItem",
                        "dynamodb:Scan",
                        "dynamodb:Query",
                        "dynamodb:UpdateItem"
                      ],
                      "Resource": [
                        {
                          "Fn::Join": [
                            ":",
                            [
                              "arn:aws:dynamodb",
                              {
                                "Ref": "AWS::Region"
                              },
                              {
                                "Ref": "AWS::AccountId"
                              },
                              {
                                "Fn::Join": [
                                  "/",
                                  [
                                    "table",
                                    {
                                      "Ref": "BookATableDynamoDBTable"
                                    }
                                  ]
                                ]
                              }
                            ]
                          ]
                        },
                        {
                          "Fn::Join": [
                            ":",
                            [
                              "arn:aws:dynamodb",
                              {
                                "Ref": "AWS::Region"
                              },
                              {
                                "Ref": "AWS::AccountId"
                              },
                              {
                                "Fn::Join": [
                                  "/",
                                  [
                                    "table",
                                    {
                                      "Ref": "BookATableDynamoDBTable"
                                    },
                                    "index",
                                    "*"
                                  ]
                                ]
                              }
                            ]
                          ]
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          }
        },
        "ReadDynamoDBRole": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "Path": "/bistro-nord/bistro-nord-backend/lambda-role/",
            "RoleName": "ReadDynamoDBRole",
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": [
                      "lambda.amazonaws.com"
                    ]
                  },
                  "Action": "sts:AssumeRole"
                }
              ]
            },
            "Policies": [
              {
                "PolicyName": "CloudWatchLogPolicy",
                "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "logs:CreateLogGroup",
                        "logs:CreateLogStream",
                        "logs:PutLogEvents",
                        "logs:TagResource"
                      ],
                      "Resource": [
                        {
                          "Fn::Join": [
                            ":",
                            [
                              "arn:aws:logs",
                              {
                                "Ref": "AWS::Region"
                              },
                              {
                                "Ref": "AWS::AccountId"
                              },
                              "log-group:/aws/lambda/*:*:*"
                            ]
                          ]
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "PolicyName": "ReadDynamoDBPolicy",
                "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "dynamodb:BatchGetItem",
                        "dynamodb:ConditionCheckItem",
                        "dynamodb:DescribeTable",
                        "dynamodb:GetItem",
                        "dynamodb:Scan",
                        "dynamodb:Query"
                      ],
                      "Resource": [
                        {
                          "Fn::Join": [
                            ":",
                            [
                              "arn:aws:dynamodb",
                              {
                                "Ref": "AWS::Region"
                              },
                              {
                                "Ref": "AWS::AccountId"
                              },
                              {
                                "Fn::Join": [
                                  "/",
                                  [
                                    "table",
                                    {
                                      "Ref": "BookATableDynamoDBTable"
                                    }
                                  ]
                                ]
                              }
                            ]
                          ]
                        },
                        {
                          "Fn::Join": [
                            ":",
                            [
                              "arn:aws:dynamodb",
                              {
                                "Ref": "AWS::Region"
                              },
                              {
                                "Ref": "AWS::AccountId"
                              },
                              {
                                "Fn::Join": [
                                  "/",
                                  [
                                    "table",
                                    {
                                      "Ref": "BookATableDynamoDBTable"
                                    },
                                    "index",
                                    "*"
                                  ]
                                ]
                              }
                            ]
                          ]
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          }
        },
        "DoneWithATableRole": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "Path": "/bistro-nord/bistro-nord-backend/lambda-role/",
            "RoleName": "DoneWithATableRole",
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": [
                      "lambda.amazonaws.com"
                    ]
                  },
                  "Action": "sts:AssumeRole"
                }
              ]
            },
            "Policies": [
              {
                "PolicyName": "CloudWatchLogPolicy",
                "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "logs:CreateLogGroup",
                        "logs:CreateLogStream",
                        "logs:PutLogEvents",
                        "logs:TagResource"
                      ],
                      "Resource": [
                        {
                          "Fn::Join": [
                            ":",
                            [
                              "arn:aws:logs",
                              {
                                "Ref": "AWS::Region"
                              },
                              {
                                "Ref": "AWS::AccountId"
                              },
                              "log-group:/aws/lambda/*:*:*"
                            ]
                          ]
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "PolicyName": "DoneWithATableReadPolicy",
                "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "dynamodb:BatchGetItem",
                        "dynamodb:ConditionCheckItem",
                        "dynamodb:DescribeTable",
                        "dynamodb:GetItem",
                        "dynamodb:Scan",
                        "dynamodb:Query",
                        "dynamodb:DeleteItem"
                      ],
                      "Resource": [
                        {
                          "Fn::Join": [
                            ":",
                            [
                              "arn:aws:dynamodb",
                              {
                                "Ref": "AWS::Region"
                              },
                              {
                                "Ref": "AWS::AccountId"
                              },
                              {
                                "Fn::Join": [
                                  "/",
                                  [
                                    "table",
                                    {
                                      "Ref": "BookATableDynamoDBTable"
                                    }
                                  ]
                                ]
                              }
                            ]
                          ]
                        },
                        {
                          "Fn::Join": [
                            ":",
                            [
                              "arn:aws:dynamodb",
                              {
                                "Ref": "AWS::Region"
                              },
                              {
                                "Ref": "AWS::AccountId"
                              },
                              {
                                "Fn::Join": [
                                  "/",
                                  [
                                    "table",
                                    {
                                      "Ref": "BookATableDynamoDBTable"
                                    },
                                    "index",
                                    "*"
                                  ]
                                ]
                              }
                            ]
                          ]
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "PolicyName": "DoneWithATableWritePolicy",
                "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "dynamodb:BatchGetItem",
                        "dynamodb:BatchWriteItem",
                        "dynamodb:ConditionCheckItem",
                        "dynamodb:PutItem",
                        "dynamodb:DescribeTable",
                        "dynamodb:DeleteItem",
                        "dynamodb:GetItem",
                        "dynamodb:Scan",
                        "dynamodb:Query",
                        "dynamodb:UpdateItem"
                      ],
                      "Resource": [
                        {
                          "Fn::Join": [
                            ":",
                            [
                              "arn:aws:dynamodb",
                              {
                                "Ref": "AWS::Region"
                              },
                              {
                                "Ref": "AWS::AccountId"
                              },
                              {
                                "Fn::Join": [
                                  "/",
                                  [
                                    "table",
                                    {
                                      "Ref": "DoneWithATableDynamoDBTable"
                                    }
                                  ]
                                ]
                              }
                            ]
                          ]
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          }
        },
        "MenuTableWriteDynamoDBRole": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "Path": "/bistro-nord/bistro-nord-backend/lambda-role/",
            "RoleName": "MenuTableWriteRole",
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": [
                      "lambda.amazonaws.com"
                    ]
                  },
                  "Action": "sts:AssumeRole"
                }
              ]
            },
            "Policies": [
              {
                "PolicyName": "CloudWatchLogPolicy",
                "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "logs:CreateLogGroup",
                        "logs:CreateLogStream",
                        "logs:PutLogEvents",
                        "logs:TagResource"
                      ],
                      "Resource": [
                        {
                          "Fn::Join": [
                            ":",
                            [
                              "arn:aws:logs",
                              {
                                "Ref": "AWS::Region"
                              },
                              {
                                "Ref": "AWS::AccountId"
                              },
                              "log-group:/aws/lambda/*:*:*"
                            ]
                          ]
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "PolicyName": "MenuTableWritePolicy",
                "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "dynamodb:BatchGetItem",
                        "dynamodb:BatchWriteItem",
                        "dynamodb:ConditionCheckItem",
                        "dynamodb:PutItem",
                        "dynamodb:DescribeTable",
                        "dynamodb:DeleteItem",
                        "dynamodb:GetItem",
                        "dynamodb:Scan",
                        "dynamodb:Query",
                        "dynamodb:UpdateItem"
                      ],
                      "Resource": [
                        {
                          "Fn::Join": [
                            ":",
                            [
                              "arn:aws:dynamodb",
                              {
                                "Ref": "AWS::Region"
                              },
                              {
                                "Ref": "AWS::AccountId"
                              },
                              {
                                "Fn::Join": [
                                  "/",
                                  [
                                    "table",
                                    {
                                      "Ref": "MenuTableDynamoDBTable"
                                    }
                                  ]
                                ]
                              }
                            ]
                          ]
                        },
                        {
                          "Fn::Join": [
                            ":",
                            [
                              "arn:aws:dynamodb",
                              {
                                "Ref": "AWS::Region"
                              },
                              {
                                "Ref": "AWS::AccountId"
                              },
                              {
                                "Fn::Join": [
                                  "/",
                                  [
                                    "table",
                                    {
                                      "Ref": "BookATableDynamoDBTable"
                                    },
                                    "index",
                                    "*"
                                  ]
                                ]
                              }
                            ]
                          ]
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          }
        }
      },
      "Outputs": {
        "ServerlessDeploymentBucketName": {
          "Value": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "Export": {
            "Name": "sls-bistro-nord-backend-dev-ServerlessDeploymentBucketName"
          }
        },
        "MiddysdkLambdaLayerQualifiedArn": {
          "Description": "Current Lambda layer version",
          "Value": {
            "Ref": "MiddysdkLambdaLayer"
          },
          "Export": {
            "Name": "sls-bistro-nord-backend-dev-MiddysdkLambdaLayerQualifiedArn"
          }
        },
        "MiddysdkLambdaLayerHash": {
          "Description": "Current Lambda layer hash",
          "Value": "278e11f3ca238f3b8899bc14ee07271007e7a2fd",
          "Export": {
            "Name": "sls-bistro-nord-backend-dev-MiddysdkLambdaLayerHash"
          }
        },
        "MiddysdkLambdaLayerS3Key": {
          "Description": "Current Lambda layer S3Key",
          "Value": "serverless/bistro-nord-backend/dev/1738320153999-2025-01-31T10:42:33.999Z/middysdk.zip",
          "Export": {
            "Name": "sls-bistro-nord-backend-dev-MiddysdkLambdaLayerS3Key"
          }
        },
        "AwssdkLambdaLayerQualifiedArn": {
          "Description": "Current Lambda layer version",
          "Value": {
            "Ref": "AwssdkLambdaLayer"
          },
          "Export": {
            "Name": "sls-bistro-nord-backend-dev-AwssdkLambdaLayerQualifiedArn"
          }
        },
        "AwssdkLambdaLayerHash": {
          "Description": "Current Lambda layer hash",
          "Value": "25154eaadc14896f6c19db4d852b5887d5212463",
          "Export": {
            "Name": "sls-bistro-nord-backend-dev-AwssdkLambdaLayerHash"
          }
        },
        "AwssdkLambdaLayerS3Key": {
          "Description": "Current Lambda layer S3Key",
          "Value": "serverless/bistro-nord-backend/dev/1738324788715-2025-01-31T11:59:48.715Z/awssdk.zip",
          "Export": {
            "Name": "sls-bistro-nord-backend-dev-AwssdkLambdaLayerS3Key"
          }
        },
        "BookATableLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "BookATableLambdaVersion9MyjqD7eqpAz5txAW66W8eZIOKsaSFm47FbkqXl0r2U"
          },
          "Export": {
            "Name": "sls-bistro-nord-backend-dev-BookATableLambdaFunctionQualifiedArn"
          }
        },
        "UpdateReservationLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "UpdateReservationLambdaVersionsZImiSjY87jbFs3QTBdvIuNldWCzYZeljRanm4MRNU"
          },
          "Export": {
            "Name": "sls-bistro-nord-backend-dev-UpdateReservationLambdaFunctionQualifiedArn"
          }
        },
        "GetAReservationLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "GetAReservationLambdaVersionQHcyBveSomm3blpQG1AOindymJ0iNsyawgRLQVEtHs"
          },
          "Export": {
            "Name": "sls-bistro-nord-backend-dev-GetAReservationLambdaFunctionQualifiedArn"
          }
        },
        "GetUsersReservationsLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "GetUsersReservationsLambdaVersionH7GFMwz5cpITNKKcZOfjmTt6SSr7bX4322dudx1vJY"
          },
          "Export": {
            "Name": "sls-bistro-nord-backend-dev-GetUsersReservationsLambdaFunctionQualifiedArn"
          }
        },
        "DoneWithAReservationLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "DoneWithAReservationLambdaVersion8zuAiT4T0u9tYo5SyH3hudQpEwIK92MgzX2IMOvHQ"
          },
          "Export": {
            "Name": "sls-bistro-nord-backend-dev-DoneWithAReservationLambdaFunctionQualifiedArn"
          }
        },
        "AddMenuItemLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "AddMenuItemLambdaVersionD4WVOWg0Ko5a9sJIpRFwXg9o8EaaI671Uw8RMc5ks"
          },
          "Export": {
            "Name": "sls-bistro-nord-backend-dev-AddMenuItemLambdaFunctionQualifiedArn"
          }
        },
        "HttpApiId": {
          "Description": "Id of the HTTP API",
          "Value": {
            "Ref": "HttpApi"
          },
          "Export": {
            "Name": "sls-bistro-nord-backend-dev-HttpApiId"
          }
        },
        "HttpApiUrl": {
          "Description": "URL of the HTTP API",
          "Value": {
            "Fn::Join": [
              "",
              [
                "https://",
                {
                  "Ref": "HttpApi"
                },
                ".execute-api.",
                {
                  "Ref": "AWS::Region"
                },
                ".",
                {
                  "Ref": "AWS::URLSuffix"
                }
              ]
            ]
          },
          "Export": {
            "Name": "sls-bistro-nord-backend-dev-HttpApiUrl"
          }
        }
      }
    },
    "coreCloudFormationTemplate": {
      "AWSTemplateFormatVersion": "2010-09-09",
      "Description": "The AWS CloudFormation template for this Serverless application",
      "Resources": {
        "ServerlessDeploymentBucket": {
          "Type": "AWS::S3::Bucket",
          "Properties": {
            "BucketEncryption": {
              "ServerSideEncryptionConfiguration": [
                {
                  "ServerSideEncryptionByDefault": {
                    "SSEAlgorithm": "AES256"
                  }
                }
              ]
            }
          }
        },
        "ServerlessDeploymentBucketPolicy": {
          "Type": "AWS::S3::BucketPolicy",
          "Properties": {
            "Bucket": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": "s3:*",
                  "Effect": "Deny",
                  "Principal": "*",
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:",
                          {
                            "Ref": "AWS::Partition"
                          },
                          ":s3:::",
                          {
                            "Ref": "ServerlessDeploymentBucket"
                          },
                          "/*"
                        ]
                      ]
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:",
                          {
                            "Ref": "AWS::Partition"
                          },
                          ":s3:::",
                          {
                            "Ref": "ServerlessDeploymentBucket"
                          }
                        ]
                      ]
                    }
                  ],
                  "Condition": {
                    "Bool": {
                      "aws:SecureTransport": false
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "Outputs": {
        "ServerlessDeploymentBucketName": {
          "Value": {
            "Ref": "ServerlessDeploymentBucket"
          }
        }
      }
    }
  }
}