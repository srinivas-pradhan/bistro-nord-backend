{
  "service": {
    "service": "bistro-nord-backend",
    "serviceObject": {
      "name": "bistro-nord-backend"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs20.x",
      "httpApi": {
        "authorizers": {
          "JwtAuthorizer": {
            "type": "jwt",
            "identitySource": "$request.header.Authorization",
            "issuerUrl": {
              "Fn::GetAtt": [
                "CognitoUserPool",
                "ProviderURL"
              ]
            },
            "audience": [
              {
                "Ref": "CognitoUserPoolClient"
              }
            ]
          }
        }
      },
      "stage": "dev",
      "region": "us-east-1",
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "BookATableLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/bistro-nord-backend-dev-bookATable"
            }
          },
          "UpdateReservationLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/bistro-nord-backend-dev-UpdateReservation"
            }
          },
          "AwssdkLambdaLayer": {
            "Type": "AWS::Lambda::LayerVersion",
            "Properties": {
              "Content": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/bistro-nord-backend/dev/1736186032741-2025-01-06T17:53:52.741Z/awssdk.zip"
              },
              "LayerName": "awssdk",
              "Description": "SDK Layer for AWS Node Package."
            }
          },
          "MiddysdkLambdaLayer": {
            "Type": "AWS::Lambda::LayerVersion",
            "Properties": {
              "Content": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/bistro-nord-backend/dev/1736186032741-2025-01-06T17:53:52.741Z/middysdk.zip"
              },
              "LayerName": "middysdk",
              "Description": "Middy Layer for JS Middleware Setup."
            }
          },
          "BookATableLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/bistro-nord-backend/dev/1736251175581-2025-01-07T11:59:35.581Z/bistro-nord-backend.zip"
              },
              "Handler": "src/bookATable/handler.TableBookHandler",
              "Runtime": "nodejs20.x",
              "FunctionName": "bistro-nord-backend-dev-bookATable",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "TABLE_NAME": "BookATable"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "WriteDynamoDBRole",
                  "Arn"
                ]
              },
              "Layers": [
                {
                  "Ref": "AwssdkLambdaLayer"
                },
                {
                  "Ref": "MiddysdkLambdaLayer"
                }
              ]
            },
            "DependsOn": [
              "BookATableLogGroup",
              "WriteDynamoDBRole"
            ]
          },
          "UpdateReservationLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/bistro-nord-backend/dev/1736251175581-2025-01-07T11:59:35.581Z/bistro-nord-backend.zip"
              },
              "Handler": "src/UpdateReservation/handler.UpdateReservation",
              "Runtime": "nodejs20.x",
              "FunctionName": "bistro-nord-backend-dev-UpdateReservation",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "TABLE_NAME": "BookATable"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "WriteDynamoDBRole",
                  "Arn"
                ]
              },
              "Layers": [
                {
                  "Ref": "AwssdkLambdaLayer"
                },
                {
                  "Ref": "MiddysdkLambdaLayer"
                }
              ]
            },
            "DependsOn": [
              "UpdateReservationLogGroup",
              "WriteDynamoDBRole"
            ]
          },
          "BookATableLambdaVersionaER0aNyqlvRCxusIZKp1ZXLYIBYk2u3scc5o5xdx4M": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "BookATableLambdaFunction"
              },
              "CodeSha256": "Eh56+Yj6l1JJ/zAdaEXCtu2uthgYZjd111JUD17tmtM="
            }
          },
          "UpdateReservationLambdaVersionDrnJAY1MUcd7ihtD839gdy8YCSaecjuwO7hx8zgt0": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateReservationLambdaFunction"
              },
              "CodeSha256": "Eh56+Yj6l1JJ/zAdaEXCtu2uthgYZjd111JUD17tmtM="
            }
          },
          "HttpApi": {
            "Type": "AWS::ApiGatewayV2::Api",
            "Properties": {
              "Name": "dev-bistro-nord-backend",
              "ProtocolType": "HTTP"
            }
          },
          "HttpApiStage": {
            "Type": "AWS::ApiGatewayV2::Stage",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "StageName": "$default",
              "AutoDeploy": true,
              "DefaultRouteSettings": {
                "DetailedMetricsEnabled": false
              }
            }
          },
          "HttpApiAuthorizerJwtAuthorizer": {
            "Type": "AWS::ApiGatewayV2::Authorizer",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "Name": "JwtAuthorizer",
              "IdentitySource": [
                "$request.header.Authorization"
              ],
              "AuthorizerType": "JWT",
              "JwtConfiguration": {
                "Audience": [
                  {
                    "$ref": "$[\"service\"][\"provider\"][\"httpApi\"][\"authorizers\"][\"JwtAuthorizer\"][\"audience\"][0]"
                  }
                ],
                "Issuer": {
                  "$ref": "$[\"service\"][\"provider\"][\"httpApi\"][\"authorizers\"][\"JwtAuthorizer\"][\"issuerUrl\"]"
                }
              }
            }
          },
          "BookATableLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "BookATableLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationBookATable": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"BookATableLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostBookatable": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /bookATable",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationBookATable"
                    }
                  ]
                ]
              },
              "AuthorizationType": "JWT",
              "AuthorizerId": {
                "Ref": "HttpApiAuthorizerJwtAuthorizer"
              },
              "AuthorizationScopes": [
                "ServerAccessScope/write"
              ]
            },
            "DependsOn": "HttpApiIntegrationBookATable"
          },
          "UpdateReservationLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateReservationLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationUpdateReservation": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"UpdateReservationLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePutUpdatereservationOrderidVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "PUT /UpdateReservation/{OrderId}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationUpdateReservation"
                    }
                  ]
                ]
              },
              "AuthorizationType": "JWT",
              "AuthorizerId": {
                "Ref": "HttpApiAuthorizerJwtAuthorizer"
              },
              "AuthorizationScopes": [
                "ServerAccessScope/write"
              ]
            },
            "DependsOn": "HttpApiIntegrationUpdateReservation"
          },
          "CognitoUserPool": {
            "Type": "AWS::Cognito::UserPool",
            "Properties": {
              "UserPoolName": "Bistro-Nord-UserPool",
              "UsernameAttributes": [
                "email"
              ],
              "AutoVerifiedAttributes": [
                "email"
              ],
              "UserPoolTags": {
                "git": "https://github.com/srinivas-pradhan/bistro-nord-backend",
                "app": "Bistro-Nord"
              }
            }
          },
          "CognitoUserPoolClient": {
            "Type": "AWS::Cognito::UserPoolClient",
            "Properties": {
              "ClientName": "Bistro-Nord-UserPool-client",
              "AccessTokenValidity": 24,
              "TokenValidityUnits": {
                "AccessToken": "hours"
              },
              "UserPoolId": {
                "Ref": "CognitoUserPool"
              },
              "GenerateSecret": true,
              "ExplicitAuthFlows": [
                "ADMIN_NO_SRP_AUTH"
              ],
              "AllowedOAuthFlows": [
                "client_credentials"
              ],
              "AllowedOAuthFlowsUserPoolClient": true,
              "AllowedOAuthScopes": [
                "ServerAccessScope/read",
                "ServerAccessScope/write"
              ],
              "SupportedIdentityProviders": [
                "COGNITO"
              ],
              "CallbackURLs": [
                "https://example.com/signout"
              ]
            }
          },
          "UserPoolDomain": {
            "Type": "AWS::Cognito::UserPoolDomain",
            "Properties": {
              "UserPoolId": {
                "Ref": "CognitoUserPool"
              },
              "Domain": "bistro-nord-backend"
            }
          },
          "UserPoolResourceServer": {
            "Type": "AWS::Cognito::UserPoolResourceServer",
            "Properties": {
              "UserPoolId": {
                "Ref": "CognitoUserPool"
              },
              "Identifier": "ServerAccessScope",
              "Name": "ServerAccessScope",
              "Scopes": [
                {
                  "ScopeName": "read",
                  "ScopeDescription": "GET Calls SCOPE"
                },
                {
                  "ScopeName": "write",
                  "ScopeDescription": "POST PUT DELETE Calls SCOPE"
                }
              ]
            }
          },
          "BookATableDynamoDBTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "BookATable",
              "AttributeDefinitions": [
                {
                  "AttributeName": "BookingRef",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "BookingNumber",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "BookingRef",
                  "KeyType": "HASH"
                }
              ],
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 10,
                "WriteCapacityUnits": 10
              },
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "BookingNumber",
                  "KeySchema": [
                    {
                      "AttributeName": "BookingNumber",
                      "KeyType": "HASH"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  },
                  "ProvisionedThroughput": {
                    "ReadCapacityUnits": 10,
                    "WriteCapacityUnits": 10
                  }
                }
              ],
              "Tags": [
                {
                  "Key": "git",
                  "Value": "https://github.com/srinivas-pradhan/bistro-nord-backend"
                },
                {
                  "Key": "app",
                  "Value": "Bistro-Nord"
                }
              ]
            }
          },
          "WriteDynamoDBRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "Path": "/bistro-nord/bistro-nord-backend/lambda-role/",
              "RoleName": "WriteDynamoDBRole",
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": "sts:AssumeRole"
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": "CloudWatchLogPolicy",
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogGroup",
                          "logs:CreateLogStream",
                          "logs:PutLogEvents",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Join": [
                              ":",
                              [
                                "arn:aws:logs",
                                {
                                  "Ref": "AWS::Region"
                                },
                                {
                                  "Ref": "AWS::AccountId"
                                },
                                "log-group:/aws/lambda/*:*:*"
                              ]
                            ]
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "PolicyName": "WriteDynamoDBPolicy",
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "dynamodb:BatchGetItem",
                          "dynamodb:BatchWriteItem",
                          "dynamodb:ConditionCheckItem",
                          "dynamodb:PutItem",
                          "dynamodb:DescribeTable",
                          "dynamodb:DeleteItem",
                          "dynamodb:GetItem",
                          "dynamodb:Scan",
                          "dynamodb:Query",
                          "dynamodb:UpdateItem"
                        ],
                        "Resource": {
                          "Fn::Join": [
                            ":",
                            [
                              "arn:aws:dynamodb",
                              {
                                "Ref": "AWS::Region"
                              },
                              {
                                "Ref": "AWS::AccountId"
                              },
                              {
                                "Fn::Join": [
                                  "/",
                                  [
                                    "table",
                                    {
                                      "Ref": "BookATableDynamoDBTable"
                                    }
                                  ]
                                ]
                              }
                            ]
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "Export": {
              "Name": "sls-bistro-nord-backend-dev-ServerlessDeploymentBucketName"
            }
          },
          "AwssdkLambdaLayerQualifiedArn": {
            "Description": "Current Lambda layer version",
            "Value": {
              "Ref": "AwssdkLambdaLayer"
            },
            "Export": {
              "Name": "sls-bistro-nord-backend-dev-AwssdkLambdaLayerQualifiedArn"
            }
          },
          "AwssdkLambdaLayerHash": {
            "Description": "Current Lambda layer hash",
            "Value": "9090ffc640c2752c8d15c74d161c366e05e9e0a0",
            "Export": {
              "Name": "sls-bistro-nord-backend-dev-AwssdkLambdaLayerHash"
            }
          },
          "AwssdkLambdaLayerS3Key": {
            "Description": "Current Lambda layer S3Key",
            "Value": "serverless/bistro-nord-backend/dev/1736186032741-2025-01-06T17:53:52.741Z/awssdk.zip",
            "Export": {
              "Name": "sls-bistro-nord-backend-dev-AwssdkLambdaLayerS3Key"
            }
          },
          "MiddysdkLambdaLayerQualifiedArn": {
            "Description": "Current Lambda layer version",
            "Value": {
              "Ref": "MiddysdkLambdaLayer"
            },
            "Export": {
              "Name": "sls-bistro-nord-backend-dev-MiddysdkLambdaLayerQualifiedArn"
            }
          },
          "MiddysdkLambdaLayerHash": {
            "Description": "Current Lambda layer hash",
            "Value": "278e11f3ca238f3b8899bc14ee07271007e7a2fd",
            "Export": {
              "Name": "sls-bistro-nord-backend-dev-MiddysdkLambdaLayerHash"
            }
          },
          "MiddysdkLambdaLayerS3Key": {
            "Description": "Current Lambda layer S3Key",
            "Value": "serverless/bistro-nord-backend/dev/1736186032741-2025-01-06T17:53:52.741Z/middysdk.zip",
            "Export": {
              "Name": "sls-bistro-nord-backend-dev-MiddysdkLambdaLayerS3Key"
            }
          },
          "BookATableLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "BookATableLambdaVersionaER0aNyqlvRCxusIZKp1ZXLYIBYk2u3scc5o5xdx4M"
            },
            "Export": {
              "Name": "sls-bistro-nord-backend-dev-BookATableLambdaFunctionQualifiedArn"
            }
          },
          "UpdateReservationLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateReservationLambdaVersionDrnJAY1MUcd7ihtD839gdy8YCSaecjuwO7hx8zgt0"
            },
            "Export": {
              "Name": "sls-bistro-nord-backend-dev-UpdateReservationLambdaFunctionQualifiedArn"
            }
          },
          "HttpApiId": {
            "Description": "Id of the HTTP API",
            "Value": {
              "Ref": "HttpApi"
            },
            "Export": {
              "Name": "sls-bistro-nord-backend-dev-HttpApiId"
            }
          },
          "HttpApiUrl": {
            "Description": "URL of the HTTP API",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "HttpApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  }
                ]
              ]
            },
            "Export": {
              "Name": "sls-bistro-nord-backend-dev-HttpApiUrl"
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "pluginsData": {},
    "functions": {
      "bookATable": {
        "handler": "src/bookATable/handler.TableBookHandler",
        "role": {
          "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"BookATableLambdaFunction\"][\"Properties\"][\"Role\"]"
        },
        "environment": {
          "TABLE_NAME": "BookATable"
        },
        "layers": {
          "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"BookATableLambdaFunction\"][\"Properties\"][\"Layers\"]"
        },
        "events": [
          {
            "httpApi": {
              "method": "POST",
              "path": "/bookATable",
              "authorizer": {
                "name": "JwtAuthorizer",
                "scopes": [
                  "ServerAccessScope/write"
                ]
              }
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/bookATable"
          }
        ],
        "name": "bistro-nord-backend-dev-bookATable",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "BookATableLambdaVersionaER0aNyqlvRCxusIZKp1ZXLYIBYk2u3scc5o5xdx4M"
      },
      "UpdateReservation": {
        "handler": "src/UpdateReservation/handler.UpdateReservation",
        "role": {
          "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"UpdateReservationLambdaFunction\"][\"Properties\"][\"Role\"]"
        },
        "environment": {
          "TABLE_NAME": "BookATable"
        },
        "layers": {
          "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"UpdateReservationLambdaFunction\"][\"Properties\"][\"Layers\"]"
        },
        "events": [
          {
            "httpApi": {
              "method": "PUT",
              "path": "/UpdateReservation/{OrderId}",
              "authorizer": {
                "name": "JwtAuthorizer",
                "scopes": [
                  "ServerAccessScope/write"
                ]
              }
            },
            "resolvedMethod": "PUT",
            "resolvedPath": "/UpdateReservation/{OrderId}"
          }
        ],
        "name": "bistro-nord-backend-dev-UpdateReservation",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "UpdateReservationLambdaVersionDrnJAY1MUcd7ihtD839gdy8YCSaecjuwO7hx8zgt0"
      }
    },
    "resources": {
      "Resources": {
        "CognitoUserPool": {
          "Type": "AWS::Cognito::UserPool",
          "Properties": {
            "UserPoolName": "Bistro-Nord-UserPool",
            "UsernameAttributes": [
              "email"
            ],
            "AutoVerifiedAttributes": [
              "email"
            ],
            "UserPoolTags": {
              "git": "https://github.com/srinivas-pradhan/bistro-nord-backend",
              "app": "Bistro-Nord"
            }
          }
        },
        "CognitoUserPoolClient": {
          "Type": "AWS::Cognito::UserPoolClient",
          "Properties": {
            "ClientName": "Bistro-Nord-UserPool-client",
            "AccessTokenValidity": 24,
            "TokenValidityUnits": {
              "AccessToken": "hours"
            },
            "UserPoolId": {
              "Ref": "CognitoUserPool"
            },
            "GenerateSecret": true,
            "ExplicitAuthFlows": [
              "ADMIN_NO_SRP_AUTH"
            ],
            "AllowedOAuthFlows": [
              "client_credentials"
            ],
            "AllowedOAuthFlowsUserPoolClient": true,
            "AllowedOAuthScopes": [
              "ServerAccessScope/read",
              "ServerAccessScope/write"
            ],
            "SupportedIdentityProviders": [
              "COGNITO"
            ],
            "CallbackURLs": [
              "https://example.com/signout"
            ]
          }
        },
        "UserPoolDomain": {
          "Type": "AWS::Cognito::UserPoolDomain",
          "Properties": {
            "UserPoolId": {
              "Ref": "CognitoUserPool"
            },
            "Domain": "bistro-nord-backend"
          }
        },
        "UserPoolResourceServer": {
          "Type": "AWS::Cognito::UserPoolResourceServer",
          "Properties": {
            "UserPoolId": {
              "Ref": "CognitoUserPool"
            },
            "Identifier": "ServerAccessScope",
            "Name": "ServerAccessScope",
            "Scopes": [
              {
                "ScopeName": "read",
                "ScopeDescription": "GET Calls SCOPE"
              },
              {
                "ScopeName": "write",
                "ScopeDescription": "POST PUT DELETE Calls SCOPE"
              }
            ]
          }
        },
        "BookATableDynamoDBTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "BookATable",
            "AttributeDefinitions": [
              {
                "AttributeName": "BookingRef",
                "AttributeType": "S"
              },
              {
                "AttributeName": "BookingNumber",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "BookingRef",
                "KeyType": "HASH"
              }
            ],
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 10,
              "WriteCapacityUnits": 10
            },
            "GlobalSecondaryIndexes": [
              {
                "IndexName": "BookingNumber",
                "KeySchema": [
                  {
                    "AttributeName": "BookingNumber",
                    "KeyType": "HASH"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                },
                "ProvisionedThroughput": {
                  "ReadCapacityUnits": 10,
                  "WriteCapacityUnits": 10
                }
              }
            ],
            "Tags": [
              {
                "Key": "git",
                "Value": "https://github.com/srinivas-pradhan/bistro-nord-backend"
              },
              {
                "Key": "app",
                "Value": "Bistro-Nord"
              }
            ]
          }
        },
        "WriteDynamoDBRole": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "Path": "/bistro-nord/bistro-nord-backend/lambda-role/",
            "RoleName": "WriteDynamoDBRole",
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": [
                      "lambda.amazonaws.com"
                    ]
                  },
                  "Action": "sts:AssumeRole"
                }
              ]
            },
            "Policies": [
              {
                "PolicyName": "CloudWatchLogPolicy",
                "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "logs:CreateLogGroup",
                        "logs:CreateLogStream",
                        "logs:PutLogEvents",
                        "logs:TagResource"
                      ],
                      "Resource": [
                        {
                          "Fn::Join": [
                            ":",
                            [
                              "arn:aws:logs",
                              {
                                "Ref": "AWS::Region"
                              },
                              {
                                "Ref": "AWS::AccountId"
                              },
                              "log-group:/aws/lambda/*:*:*"
                            ]
                          ]
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "PolicyName": "WriteDynamoDBPolicy",
                "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "dynamodb:BatchGetItem",
                        "dynamodb:BatchWriteItem",
                        "dynamodb:ConditionCheckItem",
                        "dynamodb:PutItem",
                        "dynamodb:DescribeTable",
                        "dynamodb:DeleteItem",
                        "dynamodb:GetItem",
                        "dynamodb:Scan",
                        "dynamodb:Query",
                        "dynamodb:UpdateItem"
                      ],
                      "Resource": {
                        "Fn::Join": [
                          ":",
                          [
                            "arn:aws:dynamodb",
                            {
                              "Ref": "AWS::Region"
                            },
                            {
                              "Ref": "AWS::AccountId"
                            },
                            {
                              "Fn::Join": [
                                "/",
                                [
                                  "table",
                                  {
                                    "Ref": "BookATableDynamoDBTable"
                                  }
                                ]
                              ]
                            }
                          ]
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      },
      "Outputs": {}
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "initialServerlessConfig": {
      "org": "srinivaspradhan",
      "service": "bistro-nord-backend",
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "package": {
        "patterns": [
          "!package.zip"
        ],
        "artifactsS3KeyDirname": "serverless/bistro-nord-backend/dev/code-artifacts",
        "artifact": "/Users/srinivas/Documents/repos/bistro-nord-backend/.serverless/bistro-nord-backend.zip",
        "artifactDirectoryName": "serverless/bistro-nord-backend/dev/1736251175581-2025-01-07T11:59:35.581Z"
      },
      "layers": {
        "awssdk": {
          "path": "aws-sdk-layer",
          "description": "SDK Layer for AWS Node Package.",
          "package": {
            "artifact": "/Users/srinivas/Documents/repos/bistro-nord-backend/.serverless/awssdk.zip"
          },
          "artifactAlreadyUploaded": true
        },
        "middysdk": {
          "path": "middy-layer",
          "description": "Middy Layer for JS Middleware Setup.",
          "package": {
            "artifact": "/Users/srinivas/Documents/repos/bistro-nord-backend/.serverless/middysdk.zip"
          },
          "artifactAlreadyUploaded": true
        }
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      },
      "resources": {
        "$ref": "$[\"service\"][\"resources\"]"
      }
    },
    "appId": null,
    "org": "srinivaspradhan",
    "orgId": null,
    "layers": {
      "$ref": "$[\"service\"][\"initialServerlessConfig\"][\"layers\"]"
    },
    "artifact": "/Users/srinivas/Documents/repos/bistro-nord-backend/.serverless/bistro-nord-backend.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/bistro-nord-backend/dev/1736251175581-2025-01-07T11:59:35.581Z",
    "artifact": "bistro-nord-backend.zip"
  }
}