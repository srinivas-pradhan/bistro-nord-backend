bookATable:
  handler: src/bookATable/handler.TableBookHandler
  role: !GetAtt WriteDynamoDBRole.Arn
  environment:
      TABLE_NAME: ${file(./customvars.yml):DynamoDB.BookTable}
  layers:
    - { Ref: AwssdkLambdaLayer }
    - { Ref: MiddysdkLambdaLayer }
  events:
    - httpApi:
        method: POST
        path: /bookATable
        authorizer:
          name: JwtAuthorizer
          scopes:
            - ServerAccessScope/write

UpdateReservation:
  handler: src/UpdateReservation/handler.UpdateReservationHandler
  role: !GetAtt WriteDynamoDBRole.Arn
  environment:
      TABLE_NAME: ${file(./customvars.yml):DynamoDB.BookTable}
      BOOKING_NUMBER: ${file(./customvars.yml):DynamoDB.BookingNumber}
      BOOKING_REF: ${file(./customvars.yml):DynamoDB.BookingRef}

  layers:
    - { Ref: AwssdkLambdaLayer }
    - { Ref: MiddysdkLambdaLayer }
  events:
    - httpApi:
        method: PUT
        path: /UpdateReservation/{OrderId}
        authorizer:
          name: JwtAuthorizer
          scopes:
            - ServerAccessScope/write

GetAReservation:
  handler: src/GetAReservation/handler.GetAReservationHandler
  role: !GetAtt ReadDynamoDBRole.Arn
  environment:
      TABLE_NAME: ${file(./customvars.yml):DynamoDB.BookTable}
      BOOKING_NUMBER: ${file(./customvars.yml):DynamoDB.BookingNumber}

  layers:
    - { Ref: AwssdkLambdaLayer }
    - { Ref: MiddysdkLambdaLayer }
  events:
    - httpApi:
        method: GET
        path: /GetAReservation/{OrderId}
        authorizer:
          name: JwtAuthorizer
          scopes:
            - ServerAccessScope/read

GetUsersReservations:
  handler: src/GetUsersReservations/handler.GetUsersReservationsHandler
  role: !GetAtt ReadDynamoDBRole.Arn
  environment:
      TABLE_NAME: ${file(./customvars.yml):DynamoDB.BookTable}

  layers:
    - { Ref: AwssdkLambdaLayer }
    - { Ref: MiddysdkLambdaLayer }
  events:
    - httpApi:
        method: GET
        path: /GetUsersReservations/{UserId}
        authorizer:
          name: JwtAuthorizer
          scopes:
            - ServerAccessScope/read

DoneWithAReservation:
  handler: src/DoneWithAReservation/handler.DoneWithAReservationHandler
  role: !GetAtt DoneWithATableRole.Arn
  environment:
      TABLE_NAME: ${file(./customvars.yml):DynamoDB.BookTable}
      DONE_TABLE_NAME: ${file(./customvars.yml):DynamoDB.DoneWithATable}
      BOOKING_NUMBER: ${file(./customvars.yml):DynamoDB.BookingNumber}

  layers:
    - { Ref: AwssdkLambdaLayer }
    - { Ref: MiddysdkLambdaLayer }
  events:
    - httpApi:
        method: POST
        path: /DoneWithAReservation/{OrderId}/{Status}
        authorizer:
          name: JwtAuthorizer
          scopes:
            - ServerAccessScope/write

addMenuItem:
  handler: src/addMenuItem/handler.addMenuItemHandler
  role: !GetAtt MenuTableWriteDynamoDBRole.Arn
  environment:
      TABLE_NAME: ${file(./customvars.yml):DynamoDB.MenuTable}
  layers:
    - { Ref: AwssdkLambdaLayer }
    - { Ref: MiddysdkLambdaLayer }
  events:
    - httpApi:
        method: POST
        path: /addMenuItem
        authorizer:
          name: JwtAuthorizer
          scopes:
            - ServerAccessScope/write

addMenuImage:
  handler: src/addMenuItem/handler.addMenuImageHandler
  role: !GetAtt MenuTableWriteDynamoDBRole.Arn
  environment:
      S3_BUCKET: ${file(./customvars.yml):S3.BucketName}
  layers:
    - { Ref: AwssdkLambdaLayer }
    - { Ref: MiddysdkLambdaLayer }
  events:
    - httpApi:
        method: GET
        path: /addMenuImage
        authorizer:
          name: JwtAuthorizer
          scopes:
            - ServerAccessScope/read
            
getMenuItems:
  handler: src/getMenuItems/handler.getMenuItemsHandler
  role: !GetAtt MenuTableWriteDynamoDBRole.Arn
  environment:
      TABLE_NAME: ${file(./customvars.yml):DynamoDB.MenuTable}
  layers:
    - { Ref: AwssdkLambdaLayer }
    - { Ref: MiddysdkLambdaLayer }
  events:
    - httpApi:
        method: GET
        path: /getMenuItems
        authorizer:
          name: JwtAuthorizer
          scopes:
            - ServerAccessScope/read
